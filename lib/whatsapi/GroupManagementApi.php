<?php
/**
 * GroupManagementApi
 * PHP version 7.4
 *
 * @category Class
 * @package  WhatsAPI
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * WhatsAPI Go
 *
 * The V2 of WhatsAPI Go
 *
 * The version of the OpenAPI document: 2.0
 * Contact: manjit@sponsorbook.io
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.2.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace WhatsAPI\whatsapi;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use WhatsAPI\ApiException;
use WhatsAPI\Configuration;
use WhatsAPI\HeaderSelector;
use WhatsAPI\ObjectSerializer;

/**
 * GroupManagementApi Class Doc Comment
 *
 * @category Class
 * @package  WhatsAPI
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class GroupManagementApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'instancesInstanceKeyGroupsAdminGet' => [
            'application/json',
        ],
        'instancesInstanceKeyGroupsCreatePost' => [
            'application/json',
        ],
        'instancesInstanceKeyGroupsGet' => [
            'application/json',
        ],
        'instancesInstanceKeyGroupsGroupIdAnnouncePut' => [
            'application/json',
        ],
        'instancesInstanceKeyGroupsGroupIdDelete' => [
            'application/json',
        ],
        'instancesInstanceKeyGroupsGroupIdDescriptionPut' => [
            'application/json',
        ],
        'instancesInstanceKeyGroupsGroupIdGet' => [
            'application/json',
        ],
        'instancesInstanceKeyGroupsGroupIdInviteCodeGet' => [
            'application/json',
        ],
        'instancesInstanceKeyGroupsGroupIdLockPut' => [
            'application/json',
        ],
        'instancesInstanceKeyGroupsGroupIdNamePut' => [
            'application/json',
        ],
        'instancesInstanceKeyGroupsGroupIdParticipantsAddPost' => [
            'application/json',
        ],
        'instancesInstanceKeyGroupsGroupIdParticipantsDemotePut' => [
            'application/json',
        ],
        'instancesInstanceKeyGroupsGroupIdParticipantsPromotePut' => [
            'application/json',
        ],
        'instancesInstanceKeyGroupsGroupIdParticipantsRemoveDelete' => [
            'application/json',
        ],
        'instancesInstanceKeyGroupsGroupIdProfilePicPut' => [
            'application/json',
        ],
        'instancesInstanceKeyGroupsInviteInfoGet' => [
            'application/json',
        ],
    ];

/**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation instancesInstanceKeyGroupsAdminGet
     *
     * Get admin groupss.
     *
     * @param  string $instance_key Instance key (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['instancesInstanceKeyGroupsAdminGet'] to see the possible values for this operation
     *
     * @throws \WhatsAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \WhatsAPI\models\APIResponse|\WhatsAPI\models\APIResponse|\WhatsAPI\models\APIResponse|\WhatsAPI\models\APIResponse|\WhatsAPI\models\APIResponse
     */
    public function instancesInstanceKeyGroupsAdminGet($instance_key, string $contentType = self::contentTypes['instancesInstanceKeyGroupsAdminGet'][0])
    {
        list($response) = $this->instancesInstanceKeyGroupsAdminGetWithHttpInfo($instance_key, $contentType);
        return $response;
    }

    /**
     * Operation instancesInstanceKeyGroupsAdminGetWithHttpInfo
     *
     * Get admin groupss.
     *
     * @param  string $instance_key Instance key (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['instancesInstanceKeyGroupsAdminGet'] to see the possible values for this operation
     *
     * @throws \WhatsAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \WhatsAPI\models\APIResponse|\WhatsAPI\models\APIResponse|\WhatsAPI\models\APIResponse|\WhatsAPI\models\APIResponse|\WhatsAPI\models\APIResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function instancesInstanceKeyGroupsAdminGetWithHttpInfo($instance_key, string $contentType = self::contentTypes['instancesInstanceKeyGroupsAdminGet'][0])
    {
        $request = $this->instancesInstanceKeyGroupsAdminGetRequest($instance_key, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\WhatsAPI\models\APIResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WhatsAPI\models\APIResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WhatsAPI\models\APIResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\WhatsAPI\models\APIResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WhatsAPI\models\APIResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WhatsAPI\models\APIResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\WhatsAPI\models\APIResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WhatsAPI\models\APIResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WhatsAPI\models\APIResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\WhatsAPI\models\APIResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WhatsAPI\models\APIResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WhatsAPI\models\APIResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\WhatsAPI\models\APIResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WhatsAPI\models\APIResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WhatsAPI\models\APIResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\WhatsAPI\models\APIResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WhatsAPI\models\APIResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WhatsAPI\models\APIResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WhatsAPI\models\APIResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WhatsAPI\models\APIResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WhatsAPI\models\APIResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation instancesInstanceKeyGroupsAdminGetAsync
     *
     * Get admin groupss.
     *
     * @param  string $instance_key Instance key (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['instancesInstanceKeyGroupsAdminGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function instancesInstanceKeyGroupsAdminGetAsync($instance_key, string $contentType = self::contentTypes['instancesInstanceKeyGroupsAdminGet'][0])
    {
        return $this->instancesInstanceKeyGroupsAdminGetAsyncWithHttpInfo($instance_key, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation instancesInstanceKeyGroupsAdminGetAsyncWithHttpInfo
     *
     * Get admin groupss.
     *
     * @param  string $instance_key Instance key (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['instancesInstanceKeyGroupsAdminGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function instancesInstanceKeyGroupsAdminGetAsyncWithHttpInfo($instance_key, string $contentType = self::contentTypes['instancesInstanceKeyGroupsAdminGet'][0])
    {
        $returnType = '\WhatsAPI\models\APIResponse';
        $request = $this->instancesInstanceKeyGroupsAdminGetRequest($instance_key, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'instancesInstanceKeyGroupsAdminGet'
     *
     * @param  string $instance_key Instance key (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['instancesInstanceKeyGroupsAdminGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function instancesInstanceKeyGroupsAdminGetRequest($instance_key, string $contentType = self::contentTypes['instancesInstanceKeyGroupsAdminGet'][0])
    {

        // verify the required parameter 'instance_key' is set
        if ($instance_key === null || (is_array($instance_key) && count($instance_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $instance_key when calling instancesInstanceKeyGroupsAdminGet'
            );
        }


        $resourcePath = '/instances/{instance_key}/groups/admin';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($instance_key !== null) {
            $resourcePath = str_replace(
                '{' . 'instance_key' . '}',
                ObjectSerializer::toPathValue($instance_key),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation instancesInstanceKeyGroupsCreatePost
     *
     * Create group.
     *
     * @param  string $instance_key Instance key (required)
     * @param  \WhatsAPI\models\GroupCreatePayload $data Group create payload (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['instancesInstanceKeyGroupsCreatePost'] to see the possible values for this operation
     *
     * @throws \WhatsAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \WhatsAPI\models\APIResponse|\WhatsAPI\models\APIResponse|\WhatsAPI\models\APIResponse|\WhatsAPI\models\APIResponse|\WhatsAPI\models\APIResponse
     */
    public function instancesInstanceKeyGroupsCreatePost($instance_key, $data, string $contentType = self::contentTypes['instancesInstanceKeyGroupsCreatePost'][0])
    {
        list($response) = $this->instancesInstanceKeyGroupsCreatePostWithHttpInfo($instance_key, $data, $contentType);
        return $response;
    }

    /**
     * Operation instancesInstanceKeyGroupsCreatePostWithHttpInfo
     *
     * Create group.
     *
     * @param  string $instance_key Instance key (required)
     * @param  \WhatsAPI\models\GroupCreatePayload $data Group create payload (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['instancesInstanceKeyGroupsCreatePost'] to see the possible values for this operation
     *
     * @throws \WhatsAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \WhatsAPI\models\APIResponse|\WhatsAPI\models\APIResponse|\WhatsAPI\models\APIResponse|\WhatsAPI\models\APIResponse|\WhatsAPI\models\APIResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function instancesInstanceKeyGroupsCreatePostWithHttpInfo($instance_key, $data, string $contentType = self::contentTypes['instancesInstanceKeyGroupsCreatePost'][0])
    {
        $request = $this->instancesInstanceKeyGroupsCreatePostRequest($instance_key, $data, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\WhatsAPI\models\APIResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WhatsAPI\models\APIResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WhatsAPI\models\APIResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\WhatsAPI\models\APIResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WhatsAPI\models\APIResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WhatsAPI\models\APIResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\WhatsAPI\models\APIResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WhatsAPI\models\APIResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WhatsAPI\models\APIResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\WhatsAPI\models\APIResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WhatsAPI\models\APIResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WhatsAPI\models\APIResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\WhatsAPI\models\APIResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WhatsAPI\models\APIResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WhatsAPI\models\APIResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\WhatsAPI\models\APIResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WhatsAPI\models\APIResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WhatsAPI\models\APIResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WhatsAPI\models\APIResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WhatsAPI\models\APIResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WhatsAPI\models\APIResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation instancesInstanceKeyGroupsCreatePostAsync
     *
     * Create group.
     *
     * @param  string $instance_key Instance key (required)
     * @param  \WhatsAPI\models\GroupCreatePayload $data Group create payload (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['instancesInstanceKeyGroupsCreatePost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function instancesInstanceKeyGroupsCreatePostAsync($instance_key, $data, string $contentType = self::contentTypes['instancesInstanceKeyGroupsCreatePost'][0])
    {
        return $this->instancesInstanceKeyGroupsCreatePostAsyncWithHttpInfo($instance_key, $data, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation instancesInstanceKeyGroupsCreatePostAsyncWithHttpInfo
     *
     * Create group.
     *
     * @param  string $instance_key Instance key (required)
     * @param  \WhatsAPI\models\GroupCreatePayload $data Group create payload (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['instancesInstanceKeyGroupsCreatePost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function instancesInstanceKeyGroupsCreatePostAsyncWithHttpInfo($instance_key, $data, string $contentType = self::contentTypes['instancesInstanceKeyGroupsCreatePost'][0])
    {
        $returnType = '\WhatsAPI\models\APIResponse';
        $request = $this->instancesInstanceKeyGroupsCreatePostRequest($instance_key, $data, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'instancesInstanceKeyGroupsCreatePost'
     *
     * @param  string $instance_key Instance key (required)
     * @param  \WhatsAPI\models\GroupCreatePayload $data Group create payload (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['instancesInstanceKeyGroupsCreatePost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function instancesInstanceKeyGroupsCreatePostRequest($instance_key, $data, string $contentType = self::contentTypes['instancesInstanceKeyGroupsCreatePost'][0])
    {

        // verify the required parameter 'instance_key' is set
        if ($instance_key === null || (is_array($instance_key) && count($instance_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $instance_key when calling instancesInstanceKeyGroupsCreatePost'
            );
        }

        // verify the required parameter 'data' is set
        if ($data === null || (is_array($data) && count($data) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $data when calling instancesInstanceKeyGroupsCreatePost'
            );
        }


        $resourcePath = '/instances/{instance_key}/groups/create';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($instance_key !== null) {
            $resourcePath = str_replace(
                '{' . 'instance_key' . '}',
                ObjectSerializer::toPathValue($instance_key),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($data)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($data));
            } else {
                $httpBody = $data;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation instancesInstanceKeyGroupsGet
     *
     * Get all groups.
     *
     * @param  string $instance_key Instance key (required)
     * @param  string $include_participants Include participants data (optional, default to 'true')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['instancesInstanceKeyGroupsGet'] to see the possible values for this operation
     *
     * @throws \WhatsAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \WhatsAPI\models\APIResponse|\WhatsAPI\models\APIResponse|\WhatsAPI\models\APIResponse|\WhatsAPI\models\APIResponse|\WhatsAPI\models\APIResponse
     */
    public function instancesInstanceKeyGroupsGet($instance_key, $include_participants = 'true', string $contentType = self::contentTypes['instancesInstanceKeyGroupsGet'][0])
    {
        list($response) = $this->instancesInstanceKeyGroupsGetWithHttpInfo($instance_key, $include_participants, $contentType);
        return $response;
    }

    /**
     * Operation instancesInstanceKeyGroupsGetWithHttpInfo
     *
     * Get all groups.
     *
     * @param  string $instance_key Instance key (required)
     * @param  string $include_participants Include participants data (optional, default to 'true')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['instancesInstanceKeyGroupsGet'] to see the possible values for this operation
     *
     * @throws \WhatsAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \WhatsAPI\models\APIResponse|\WhatsAPI\models\APIResponse|\WhatsAPI\models\APIResponse|\WhatsAPI\models\APIResponse|\WhatsAPI\models\APIResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function instancesInstanceKeyGroupsGetWithHttpInfo($instance_key, $include_participants = 'true', string $contentType = self::contentTypes['instancesInstanceKeyGroupsGet'][0])
    {
        $request = $this->instancesInstanceKeyGroupsGetRequest($instance_key, $include_participants, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\WhatsAPI\models\APIResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WhatsAPI\models\APIResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WhatsAPI\models\APIResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\WhatsAPI\models\APIResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WhatsAPI\models\APIResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WhatsAPI\models\APIResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\WhatsAPI\models\APIResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WhatsAPI\models\APIResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WhatsAPI\models\APIResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\WhatsAPI\models\APIResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WhatsAPI\models\APIResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WhatsAPI\models\APIResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\WhatsAPI\models\APIResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WhatsAPI\models\APIResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WhatsAPI\models\APIResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\WhatsAPI\models\APIResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WhatsAPI\models\APIResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WhatsAPI\models\APIResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WhatsAPI\models\APIResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WhatsAPI\models\APIResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WhatsAPI\models\APIResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation instancesInstanceKeyGroupsGetAsync
     *
     * Get all groups.
     *
     * @param  string $instance_key Instance key (required)
     * @param  string $include_participants Include participants data (optional, default to 'true')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['instancesInstanceKeyGroupsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function instancesInstanceKeyGroupsGetAsync($instance_key, $include_participants = 'true', string $contentType = self::contentTypes['instancesInstanceKeyGroupsGet'][0])
    {
        return $this->instancesInstanceKeyGroupsGetAsyncWithHttpInfo($instance_key, $include_participants, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation instancesInstanceKeyGroupsGetAsyncWithHttpInfo
     *
     * Get all groups.
     *
     * @param  string $instance_key Instance key (required)
     * @param  string $include_participants Include participants data (optional, default to 'true')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['instancesInstanceKeyGroupsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function instancesInstanceKeyGroupsGetAsyncWithHttpInfo($instance_key, $include_participants = 'true', string $contentType = self::contentTypes['instancesInstanceKeyGroupsGet'][0])
    {
        $returnType = '\WhatsAPI\models\APIResponse';
        $request = $this->instancesInstanceKeyGroupsGetRequest($instance_key, $include_participants, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'instancesInstanceKeyGroupsGet'
     *
     * @param  string $instance_key Instance key (required)
     * @param  string $include_participants Include participants data (optional, default to 'true')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['instancesInstanceKeyGroupsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function instancesInstanceKeyGroupsGetRequest($instance_key, $include_participants = 'true', string $contentType = self::contentTypes['instancesInstanceKeyGroupsGet'][0])
    {

        // verify the required parameter 'instance_key' is set
        if ($instance_key === null || (is_array($instance_key) && count($instance_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $instance_key when calling instancesInstanceKeyGroupsGet'
            );
        }



        $resourcePath = '/instances/{instance_key}/groups/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $include_participants,
            'include_participants', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($instance_key !== null) {
            $resourcePath = str_replace(
                '{' . 'instance_key' . '}',
                ObjectSerializer::toPathValue($instance_key),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation instancesInstanceKeyGroupsGroupIdAnnouncePut
     *
     * Set group announce.
     *
     * @param  string $instance_key Instance key (required)
     * @param  bool $announce Announce status (required)
     * @param  string $group_id Group id of the group (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['instancesInstanceKeyGroupsGroupIdAnnouncePut'] to see the possible values for this operation
     *
     * @throws \WhatsAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \WhatsAPI\models\APIResponse|\WhatsAPI\models\APIResponse|\WhatsAPI\models\APIResponse|\WhatsAPI\models\APIResponse|\WhatsAPI\models\APIResponse
     */
    public function instancesInstanceKeyGroupsGroupIdAnnouncePut($instance_key, $announce, $group_id, string $contentType = self::contentTypes['instancesInstanceKeyGroupsGroupIdAnnouncePut'][0])
    {
        list($response) = $this->instancesInstanceKeyGroupsGroupIdAnnouncePutWithHttpInfo($instance_key, $announce, $group_id, $contentType);
        return $response;
    }

    /**
     * Operation instancesInstanceKeyGroupsGroupIdAnnouncePutWithHttpInfo
     *
     * Set group announce.
     *
     * @param  string $instance_key Instance key (required)
     * @param  bool $announce Announce status (required)
     * @param  string $group_id Group id of the group (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['instancesInstanceKeyGroupsGroupIdAnnouncePut'] to see the possible values for this operation
     *
     * @throws \WhatsAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \WhatsAPI\models\APIResponse|\WhatsAPI\models\APIResponse|\WhatsAPI\models\APIResponse|\WhatsAPI\models\APIResponse|\WhatsAPI\models\APIResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function instancesInstanceKeyGroupsGroupIdAnnouncePutWithHttpInfo($instance_key, $announce, $group_id, string $contentType = self::contentTypes['instancesInstanceKeyGroupsGroupIdAnnouncePut'][0])
    {
        $request = $this->instancesInstanceKeyGroupsGroupIdAnnouncePutRequest($instance_key, $announce, $group_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\WhatsAPI\models\APIResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WhatsAPI\models\APIResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WhatsAPI\models\APIResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\WhatsAPI\models\APIResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WhatsAPI\models\APIResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WhatsAPI\models\APIResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\WhatsAPI\models\APIResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WhatsAPI\models\APIResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WhatsAPI\models\APIResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\WhatsAPI\models\APIResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WhatsAPI\models\APIResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WhatsAPI\models\APIResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\WhatsAPI\models\APIResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WhatsAPI\models\APIResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WhatsAPI\models\APIResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\WhatsAPI\models\APIResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WhatsAPI\models\APIResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WhatsAPI\models\APIResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WhatsAPI\models\APIResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WhatsAPI\models\APIResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WhatsAPI\models\APIResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation instancesInstanceKeyGroupsGroupIdAnnouncePutAsync
     *
     * Set group announce.
     *
     * @param  string $instance_key Instance key (required)
     * @param  bool $announce Announce status (required)
     * @param  string $group_id Group id of the group (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['instancesInstanceKeyGroupsGroupIdAnnouncePut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function instancesInstanceKeyGroupsGroupIdAnnouncePutAsync($instance_key, $announce, $group_id, string $contentType = self::contentTypes['instancesInstanceKeyGroupsGroupIdAnnouncePut'][0])
    {
        return $this->instancesInstanceKeyGroupsGroupIdAnnouncePutAsyncWithHttpInfo($instance_key, $announce, $group_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation instancesInstanceKeyGroupsGroupIdAnnouncePutAsyncWithHttpInfo
     *
     * Set group announce.
     *
     * @param  string $instance_key Instance key (required)
     * @param  bool $announce Announce status (required)
     * @param  string $group_id Group id of the group (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['instancesInstanceKeyGroupsGroupIdAnnouncePut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function instancesInstanceKeyGroupsGroupIdAnnouncePutAsyncWithHttpInfo($instance_key, $announce, $group_id, string $contentType = self::contentTypes['instancesInstanceKeyGroupsGroupIdAnnouncePut'][0])
    {
        $returnType = '\WhatsAPI\models\APIResponse';
        $request = $this->instancesInstanceKeyGroupsGroupIdAnnouncePutRequest($instance_key, $announce, $group_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'instancesInstanceKeyGroupsGroupIdAnnouncePut'
     *
     * @param  string $instance_key Instance key (required)
     * @param  bool $announce Announce status (required)
     * @param  string $group_id Group id of the group (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['instancesInstanceKeyGroupsGroupIdAnnouncePut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function instancesInstanceKeyGroupsGroupIdAnnouncePutRequest($instance_key, $announce, $group_id, string $contentType = self::contentTypes['instancesInstanceKeyGroupsGroupIdAnnouncePut'][0])
    {

        // verify the required parameter 'instance_key' is set
        if ($instance_key === null || (is_array($instance_key) && count($instance_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $instance_key when calling instancesInstanceKeyGroupsGroupIdAnnouncePut'
            );
        }

        // verify the required parameter 'announce' is set
        if ($announce === null || (is_array($announce) && count($announce) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $announce when calling instancesInstanceKeyGroupsGroupIdAnnouncePut'
            );
        }

        // verify the required parameter 'group_id' is set
        if ($group_id === null || (is_array($group_id) && count($group_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $group_id when calling instancesInstanceKeyGroupsGroupIdAnnouncePut'
            );
        }


        $resourcePath = '/instances/{instance_key}/groups/{group_id}/announce';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($instance_key !== null) {
            $resourcePath = str_replace(
                '{' . 'instance_key' . '}',
                ObjectSerializer::toPathValue($instance_key),
                $resourcePath
            );
        }
        // path params
        if ($announce !== null) {
            $resourcePath = str_replace(
                '{' . 'announce' . '}',
                ObjectSerializer::toPathValue($announce),
                $resourcePath
            );
        }
        // path params
        if ($group_id !== null) {
            $resourcePath = str_replace(
                '{' . 'group_id' . '}',
                ObjectSerializer::toPathValue($group_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation instancesInstanceKeyGroupsGroupIdDelete
     *
     * Leaves the group.
     *
     * @param  string $instance_key Instance key (required)
     * @param  string $group_id Group id of the group (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['instancesInstanceKeyGroupsGroupIdDelete'] to see the possible values for this operation
     *
     * @throws \WhatsAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \WhatsAPI\models\APIResponse|\WhatsAPI\models\APIResponse|\WhatsAPI\models\APIResponse|\WhatsAPI\models\APIResponse|\WhatsAPI\models\APIResponse
     */
    public function instancesInstanceKeyGroupsGroupIdDelete($instance_key, $group_id, string $contentType = self::contentTypes['instancesInstanceKeyGroupsGroupIdDelete'][0])
    {
        list($response) = $this->instancesInstanceKeyGroupsGroupIdDeleteWithHttpInfo($instance_key, $group_id, $contentType);
        return $response;
    }

    /**
     * Operation instancesInstanceKeyGroupsGroupIdDeleteWithHttpInfo
     *
     * Leaves the group.
     *
     * @param  string $instance_key Instance key (required)
     * @param  string $group_id Group id of the group (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['instancesInstanceKeyGroupsGroupIdDelete'] to see the possible values for this operation
     *
     * @throws \WhatsAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \WhatsAPI\models\APIResponse|\WhatsAPI\models\APIResponse|\WhatsAPI\models\APIResponse|\WhatsAPI\models\APIResponse|\WhatsAPI\models\APIResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function instancesInstanceKeyGroupsGroupIdDeleteWithHttpInfo($instance_key, $group_id, string $contentType = self::contentTypes['instancesInstanceKeyGroupsGroupIdDelete'][0])
    {
        $request = $this->instancesInstanceKeyGroupsGroupIdDeleteRequest($instance_key, $group_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\WhatsAPI\models\APIResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WhatsAPI\models\APIResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WhatsAPI\models\APIResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\WhatsAPI\models\APIResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WhatsAPI\models\APIResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WhatsAPI\models\APIResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\WhatsAPI\models\APIResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WhatsAPI\models\APIResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WhatsAPI\models\APIResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\WhatsAPI\models\APIResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WhatsAPI\models\APIResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WhatsAPI\models\APIResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\WhatsAPI\models\APIResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WhatsAPI\models\APIResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WhatsAPI\models\APIResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\WhatsAPI\models\APIResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WhatsAPI\models\APIResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WhatsAPI\models\APIResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WhatsAPI\models\APIResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WhatsAPI\models\APIResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WhatsAPI\models\APIResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation instancesInstanceKeyGroupsGroupIdDeleteAsync
     *
     * Leaves the group.
     *
     * @param  string $instance_key Instance key (required)
     * @param  string $group_id Group id of the group (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['instancesInstanceKeyGroupsGroupIdDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function instancesInstanceKeyGroupsGroupIdDeleteAsync($instance_key, $group_id, string $contentType = self::contentTypes['instancesInstanceKeyGroupsGroupIdDelete'][0])
    {
        return $this->instancesInstanceKeyGroupsGroupIdDeleteAsyncWithHttpInfo($instance_key, $group_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation instancesInstanceKeyGroupsGroupIdDeleteAsyncWithHttpInfo
     *
     * Leaves the group.
     *
     * @param  string $instance_key Instance key (required)
     * @param  string $group_id Group id of the group (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['instancesInstanceKeyGroupsGroupIdDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function instancesInstanceKeyGroupsGroupIdDeleteAsyncWithHttpInfo($instance_key, $group_id, string $contentType = self::contentTypes['instancesInstanceKeyGroupsGroupIdDelete'][0])
    {
        $returnType = '\WhatsAPI\models\APIResponse';
        $request = $this->instancesInstanceKeyGroupsGroupIdDeleteRequest($instance_key, $group_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'instancesInstanceKeyGroupsGroupIdDelete'
     *
     * @param  string $instance_key Instance key (required)
     * @param  string $group_id Group id of the group (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['instancesInstanceKeyGroupsGroupIdDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function instancesInstanceKeyGroupsGroupIdDeleteRequest($instance_key, $group_id, string $contentType = self::contentTypes['instancesInstanceKeyGroupsGroupIdDelete'][0])
    {

        // verify the required parameter 'instance_key' is set
        if ($instance_key === null || (is_array($instance_key) && count($instance_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $instance_key when calling instancesInstanceKeyGroupsGroupIdDelete'
            );
        }

        // verify the required parameter 'group_id' is set
        if ($group_id === null || (is_array($group_id) && count($group_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $group_id when calling instancesInstanceKeyGroupsGroupIdDelete'
            );
        }


        $resourcePath = '/instances/{instance_key}/groups/{group_id}/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($instance_key !== null) {
            $resourcePath = str_replace(
                '{' . 'instance_key' . '}',
                ObjectSerializer::toPathValue($instance_key),
                $resourcePath
            );
        }
        // path params
        if ($group_id !== null) {
            $resourcePath = str_replace(
                '{' . 'group_id' . '}',
                ObjectSerializer::toPathValue($group_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation instancesInstanceKeyGroupsGroupIdDescriptionPut
     *
     * Set group description.
     *
     * @param  string $instance_key Instance key (required)
     * @param  string $group_id Group id of the group (required)
     * @param  \WhatsAPI\models\GroupUpdateDescriptionPayload $data Group description data (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['instancesInstanceKeyGroupsGroupIdDescriptionPut'] to see the possible values for this operation
     *
     * @throws \WhatsAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \WhatsAPI\models\APIResponse|\WhatsAPI\models\APIResponse|\WhatsAPI\models\APIResponse|\WhatsAPI\models\APIResponse|\WhatsAPI\models\APIResponse
     */
    public function instancesInstanceKeyGroupsGroupIdDescriptionPut($instance_key, $group_id, $data, string $contentType = self::contentTypes['instancesInstanceKeyGroupsGroupIdDescriptionPut'][0])
    {
        list($response) = $this->instancesInstanceKeyGroupsGroupIdDescriptionPutWithHttpInfo($instance_key, $group_id, $data, $contentType);
        return $response;
    }

    /**
     * Operation instancesInstanceKeyGroupsGroupIdDescriptionPutWithHttpInfo
     *
     * Set group description.
     *
     * @param  string $instance_key Instance key (required)
     * @param  string $group_id Group id of the group (required)
     * @param  \WhatsAPI\models\GroupUpdateDescriptionPayload $data Group description data (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['instancesInstanceKeyGroupsGroupIdDescriptionPut'] to see the possible values for this operation
     *
     * @throws \WhatsAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \WhatsAPI\models\APIResponse|\WhatsAPI\models\APIResponse|\WhatsAPI\models\APIResponse|\WhatsAPI\models\APIResponse|\WhatsAPI\models\APIResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function instancesInstanceKeyGroupsGroupIdDescriptionPutWithHttpInfo($instance_key, $group_id, $data, string $contentType = self::contentTypes['instancesInstanceKeyGroupsGroupIdDescriptionPut'][0])
    {
        $request = $this->instancesInstanceKeyGroupsGroupIdDescriptionPutRequest($instance_key, $group_id, $data, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\WhatsAPI\models\APIResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WhatsAPI\models\APIResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WhatsAPI\models\APIResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\WhatsAPI\models\APIResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WhatsAPI\models\APIResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WhatsAPI\models\APIResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\WhatsAPI\models\APIResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WhatsAPI\models\APIResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WhatsAPI\models\APIResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\WhatsAPI\models\APIResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WhatsAPI\models\APIResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WhatsAPI\models\APIResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\WhatsAPI\models\APIResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WhatsAPI\models\APIResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WhatsAPI\models\APIResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\WhatsAPI\models\APIResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WhatsAPI\models\APIResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WhatsAPI\models\APIResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WhatsAPI\models\APIResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WhatsAPI\models\APIResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WhatsAPI\models\APIResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation instancesInstanceKeyGroupsGroupIdDescriptionPutAsync
     *
     * Set group description.
     *
     * @param  string $instance_key Instance key (required)
     * @param  string $group_id Group id of the group (required)
     * @param  \WhatsAPI\models\GroupUpdateDescriptionPayload $data Group description data (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['instancesInstanceKeyGroupsGroupIdDescriptionPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function instancesInstanceKeyGroupsGroupIdDescriptionPutAsync($instance_key, $group_id, $data, string $contentType = self::contentTypes['instancesInstanceKeyGroupsGroupIdDescriptionPut'][0])
    {
        return $this->instancesInstanceKeyGroupsGroupIdDescriptionPutAsyncWithHttpInfo($instance_key, $group_id, $data, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation instancesInstanceKeyGroupsGroupIdDescriptionPutAsyncWithHttpInfo
     *
     * Set group description.
     *
     * @param  string $instance_key Instance key (required)
     * @param  string $group_id Group id of the group (required)
     * @param  \WhatsAPI\models\GroupUpdateDescriptionPayload $data Group description data (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['instancesInstanceKeyGroupsGroupIdDescriptionPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function instancesInstanceKeyGroupsGroupIdDescriptionPutAsyncWithHttpInfo($instance_key, $group_id, $data, string $contentType = self::contentTypes['instancesInstanceKeyGroupsGroupIdDescriptionPut'][0])
    {
        $returnType = '\WhatsAPI\models\APIResponse';
        $request = $this->instancesInstanceKeyGroupsGroupIdDescriptionPutRequest($instance_key, $group_id, $data, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'instancesInstanceKeyGroupsGroupIdDescriptionPut'
     *
     * @param  string $instance_key Instance key (required)
     * @param  string $group_id Group id of the group (required)
     * @param  \WhatsAPI\models\GroupUpdateDescriptionPayload $data Group description data (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['instancesInstanceKeyGroupsGroupIdDescriptionPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function instancesInstanceKeyGroupsGroupIdDescriptionPutRequest($instance_key, $group_id, $data, string $contentType = self::contentTypes['instancesInstanceKeyGroupsGroupIdDescriptionPut'][0])
    {

        // verify the required parameter 'instance_key' is set
        if ($instance_key === null || (is_array($instance_key) && count($instance_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $instance_key when calling instancesInstanceKeyGroupsGroupIdDescriptionPut'
            );
        }

        // verify the required parameter 'group_id' is set
        if ($group_id === null || (is_array($group_id) && count($group_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $group_id when calling instancesInstanceKeyGroupsGroupIdDescriptionPut'
            );
        }

        // verify the required parameter 'data' is set
        if ($data === null || (is_array($data) && count($data) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $data when calling instancesInstanceKeyGroupsGroupIdDescriptionPut'
            );
        }


        $resourcePath = '/instances/{instance_key}/groups/{group_id}/description';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($instance_key !== null) {
            $resourcePath = str_replace(
                '{' . 'instance_key' . '}',
                ObjectSerializer::toPathValue($instance_key),
                $resourcePath
            );
        }
        // path params
        if ($group_id !== null) {
            $resourcePath = str_replace(
                '{' . 'group_id' . '}',
                ObjectSerializer::toPathValue($group_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($data)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($data));
            } else {
                $httpBody = $data;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation instancesInstanceKeyGroupsGroupIdGet
     *
     * Get group.
     *
     * @param  string $instance_key Instance key (required)
     * @param  string $group_id Group id of the group (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['instancesInstanceKeyGroupsGroupIdGet'] to see the possible values for this operation
     *
     * @throws \WhatsAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \WhatsAPI\models\APIResponse|\WhatsAPI\models\APIResponse|\WhatsAPI\models\APIResponse|\WhatsAPI\models\APIResponse|\WhatsAPI\models\APIResponse
     */
    public function instancesInstanceKeyGroupsGroupIdGet($instance_key, $group_id, string $contentType = self::contentTypes['instancesInstanceKeyGroupsGroupIdGet'][0])
    {
        list($response) = $this->instancesInstanceKeyGroupsGroupIdGetWithHttpInfo($instance_key, $group_id, $contentType);
        return $response;
    }

    /**
     * Operation instancesInstanceKeyGroupsGroupIdGetWithHttpInfo
     *
     * Get group.
     *
     * @param  string $instance_key Instance key (required)
     * @param  string $group_id Group id of the group (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['instancesInstanceKeyGroupsGroupIdGet'] to see the possible values for this operation
     *
     * @throws \WhatsAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \WhatsAPI\models\APIResponse|\WhatsAPI\models\APIResponse|\WhatsAPI\models\APIResponse|\WhatsAPI\models\APIResponse|\WhatsAPI\models\APIResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function instancesInstanceKeyGroupsGroupIdGetWithHttpInfo($instance_key, $group_id, string $contentType = self::contentTypes['instancesInstanceKeyGroupsGroupIdGet'][0])
    {
        $request = $this->instancesInstanceKeyGroupsGroupIdGetRequest($instance_key, $group_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\WhatsAPI\models\APIResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WhatsAPI\models\APIResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WhatsAPI\models\APIResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\WhatsAPI\models\APIResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WhatsAPI\models\APIResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WhatsAPI\models\APIResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\WhatsAPI\models\APIResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WhatsAPI\models\APIResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WhatsAPI\models\APIResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\WhatsAPI\models\APIResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WhatsAPI\models\APIResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WhatsAPI\models\APIResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\WhatsAPI\models\APIResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WhatsAPI\models\APIResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WhatsAPI\models\APIResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\WhatsAPI\models\APIResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WhatsAPI\models\APIResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WhatsAPI\models\APIResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WhatsAPI\models\APIResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WhatsAPI\models\APIResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WhatsAPI\models\APIResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation instancesInstanceKeyGroupsGroupIdGetAsync
     *
     * Get group.
     *
     * @param  string $instance_key Instance key (required)
     * @param  string $group_id Group id of the group (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['instancesInstanceKeyGroupsGroupIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function instancesInstanceKeyGroupsGroupIdGetAsync($instance_key, $group_id, string $contentType = self::contentTypes['instancesInstanceKeyGroupsGroupIdGet'][0])
    {
        return $this->instancesInstanceKeyGroupsGroupIdGetAsyncWithHttpInfo($instance_key, $group_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation instancesInstanceKeyGroupsGroupIdGetAsyncWithHttpInfo
     *
     * Get group.
     *
     * @param  string $instance_key Instance key (required)
     * @param  string $group_id Group id of the group (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['instancesInstanceKeyGroupsGroupIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function instancesInstanceKeyGroupsGroupIdGetAsyncWithHttpInfo($instance_key, $group_id, string $contentType = self::contentTypes['instancesInstanceKeyGroupsGroupIdGet'][0])
    {
        $returnType = '\WhatsAPI\models\APIResponse';
        $request = $this->instancesInstanceKeyGroupsGroupIdGetRequest($instance_key, $group_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'instancesInstanceKeyGroupsGroupIdGet'
     *
     * @param  string $instance_key Instance key (required)
     * @param  string $group_id Group id of the group (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['instancesInstanceKeyGroupsGroupIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function instancesInstanceKeyGroupsGroupIdGetRequest($instance_key, $group_id, string $contentType = self::contentTypes['instancesInstanceKeyGroupsGroupIdGet'][0])
    {

        // verify the required parameter 'instance_key' is set
        if ($instance_key === null || (is_array($instance_key) && count($instance_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $instance_key when calling instancesInstanceKeyGroupsGroupIdGet'
            );
        }

        // verify the required parameter 'group_id' is set
        if ($group_id === null || (is_array($group_id) && count($group_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $group_id when calling instancesInstanceKeyGroupsGroupIdGet'
            );
        }


        $resourcePath = '/instances/{instance_key}/groups/{group_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($instance_key !== null) {
            $resourcePath = str_replace(
                '{' . 'instance_key' . '}',
                ObjectSerializer::toPathValue($instance_key),
                $resourcePath
            );
        }
        // path params
        if ($group_id !== null) {
            $resourcePath = str_replace(
                '{' . 'group_id' . '}',
                ObjectSerializer::toPathValue($group_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation instancesInstanceKeyGroupsGroupIdInviteCodeGet
     *
     * Get group invite code.
     *
     * @param  string $instance_key Instance key (required)
     * @param  string $group_id Group id of the group (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['instancesInstanceKeyGroupsGroupIdInviteCodeGet'] to see the possible values for this operation
     *
     * @throws \WhatsAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \WhatsAPI\models\APIResponse|\WhatsAPI\models\APIResponse|\WhatsAPI\models\APIResponse|\WhatsAPI\models\APIResponse|\WhatsAPI\models\APIResponse
     */
    public function instancesInstanceKeyGroupsGroupIdInviteCodeGet($instance_key, $group_id, string $contentType = self::contentTypes['instancesInstanceKeyGroupsGroupIdInviteCodeGet'][0])
    {
        list($response) = $this->instancesInstanceKeyGroupsGroupIdInviteCodeGetWithHttpInfo($instance_key, $group_id, $contentType);
        return $response;
    }

    /**
     * Operation instancesInstanceKeyGroupsGroupIdInviteCodeGetWithHttpInfo
     *
     * Get group invite code.
     *
     * @param  string $instance_key Instance key (required)
     * @param  string $group_id Group id of the group (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['instancesInstanceKeyGroupsGroupIdInviteCodeGet'] to see the possible values for this operation
     *
     * @throws \WhatsAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \WhatsAPI\models\APIResponse|\WhatsAPI\models\APIResponse|\WhatsAPI\models\APIResponse|\WhatsAPI\models\APIResponse|\WhatsAPI\models\APIResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function instancesInstanceKeyGroupsGroupIdInviteCodeGetWithHttpInfo($instance_key, $group_id, string $contentType = self::contentTypes['instancesInstanceKeyGroupsGroupIdInviteCodeGet'][0])
    {
        $request = $this->instancesInstanceKeyGroupsGroupIdInviteCodeGetRequest($instance_key, $group_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\WhatsAPI\models\APIResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WhatsAPI\models\APIResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WhatsAPI\models\APIResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\WhatsAPI\models\APIResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WhatsAPI\models\APIResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WhatsAPI\models\APIResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\WhatsAPI\models\APIResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WhatsAPI\models\APIResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WhatsAPI\models\APIResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\WhatsAPI\models\APIResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WhatsAPI\models\APIResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WhatsAPI\models\APIResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\WhatsAPI\models\APIResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WhatsAPI\models\APIResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WhatsAPI\models\APIResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\WhatsAPI\models\APIResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WhatsAPI\models\APIResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WhatsAPI\models\APIResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WhatsAPI\models\APIResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WhatsAPI\models\APIResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WhatsAPI\models\APIResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation instancesInstanceKeyGroupsGroupIdInviteCodeGetAsync
     *
     * Get group invite code.
     *
     * @param  string $instance_key Instance key (required)
     * @param  string $group_id Group id of the group (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['instancesInstanceKeyGroupsGroupIdInviteCodeGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function instancesInstanceKeyGroupsGroupIdInviteCodeGetAsync($instance_key, $group_id, string $contentType = self::contentTypes['instancesInstanceKeyGroupsGroupIdInviteCodeGet'][0])
    {
        return $this->instancesInstanceKeyGroupsGroupIdInviteCodeGetAsyncWithHttpInfo($instance_key, $group_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation instancesInstanceKeyGroupsGroupIdInviteCodeGetAsyncWithHttpInfo
     *
     * Get group invite code.
     *
     * @param  string $instance_key Instance key (required)
     * @param  string $group_id Group id of the group (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['instancesInstanceKeyGroupsGroupIdInviteCodeGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function instancesInstanceKeyGroupsGroupIdInviteCodeGetAsyncWithHttpInfo($instance_key, $group_id, string $contentType = self::contentTypes['instancesInstanceKeyGroupsGroupIdInviteCodeGet'][0])
    {
        $returnType = '\WhatsAPI\models\APIResponse';
        $request = $this->instancesInstanceKeyGroupsGroupIdInviteCodeGetRequest($instance_key, $group_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'instancesInstanceKeyGroupsGroupIdInviteCodeGet'
     *
     * @param  string $instance_key Instance key (required)
     * @param  string $group_id Group id of the group (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['instancesInstanceKeyGroupsGroupIdInviteCodeGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function instancesInstanceKeyGroupsGroupIdInviteCodeGetRequest($instance_key, $group_id, string $contentType = self::contentTypes['instancesInstanceKeyGroupsGroupIdInviteCodeGet'][0])
    {

        // verify the required parameter 'instance_key' is set
        if ($instance_key === null || (is_array($instance_key) && count($instance_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $instance_key when calling instancesInstanceKeyGroupsGroupIdInviteCodeGet'
            );
        }

        // verify the required parameter 'group_id' is set
        if ($group_id === null || (is_array($group_id) && count($group_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $group_id when calling instancesInstanceKeyGroupsGroupIdInviteCodeGet'
            );
        }


        $resourcePath = '/instances/{instance_key}/groups/{group_id}/invite-code';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($instance_key !== null) {
            $resourcePath = str_replace(
                '{' . 'instance_key' . '}',
                ObjectSerializer::toPathValue($instance_key),
                $resourcePath
            );
        }
        // path params
        if ($group_id !== null) {
            $resourcePath = str_replace(
                '{' . 'group_id' . '}',
                ObjectSerializer::toPathValue($group_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation instancesInstanceKeyGroupsGroupIdLockPut
     *
     * Set group locked.
     *
     * @param  string $instance_key Instance key (required)
     * @param  bool $locked Locked status (required)
     * @param  string $group_id Group id of the group (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['instancesInstanceKeyGroupsGroupIdLockPut'] to see the possible values for this operation
     *
     * @throws \WhatsAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \WhatsAPI\models\APIResponse|\WhatsAPI\models\APIResponse|\WhatsAPI\models\APIResponse|\WhatsAPI\models\APIResponse|\WhatsAPI\models\APIResponse
     */
    public function instancesInstanceKeyGroupsGroupIdLockPut($instance_key, $locked, $group_id, string $contentType = self::contentTypes['instancesInstanceKeyGroupsGroupIdLockPut'][0])
    {
        list($response) = $this->instancesInstanceKeyGroupsGroupIdLockPutWithHttpInfo($instance_key, $locked, $group_id, $contentType);
        return $response;
    }

    /**
     * Operation instancesInstanceKeyGroupsGroupIdLockPutWithHttpInfo
     *
     * Set group locked.
     *
     * @param  string $instance_key Instance key (required)
     * @param  bool $locked Locked status (required)
     * @param  string $group_id Group id of the group (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['instancesInstanceKeyGroupsGroupIdLockPut'] to see the possible values for this operation
     *
     * @throws \WhatsAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \WhatsAPI\models\APIResponse|\WhatsAPI\models\APIResponse|\WhatsAPI\models\APIResponse|\WhatsAPI\models\APIResponse|\WhatsAPI\models\APIResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function instancesInstanceKeyGroupsGroupIdLockPutWithHttpInfo($instance_key, $locked, $group_id, string $contentType = self::contentTypes['instancesInstanceKeyGroupsGroupIdLockPut'][0])
    {
        $request = $this->instancesInstanceKeyGroupsGroupIdLockPutRequest($instance_key, $locked, $group_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\WhatsAPI\models\APIResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WhatsAPI\models\APIResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WhatsAPI\models\APIResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\WhatsAPI\models\APIResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WhatsAPI\models\APIResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WhatsAPI\models\APIResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\WhatsAPI\models\APIResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WhatsAPI\models\APIResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WhatsAPI\models\APIResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\WhatsAPI\models\APIResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WhatsAPI\models\APIResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WhatsAPI\models\APIResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\WhatsAPI\models\APIResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WhatsAPI\models\APIResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WhatsAPI\models\APIResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\WhatsAPI\models\APIResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WhatsAPI\models\APIResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WhatsAPI\models\APIResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WhatsAPI\models\APIResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WhatsAPI\models\APIResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WhatsAPI\models\APIResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation instancesInstanceKeyGroupsGroupIdLockPutAsync
     *
     * Set group locked.
     *
     * @param  string $instance_key Instance key (required)
     * @param  bool $locked Locked status (required)
     * @param  string $group_id Group id of the group (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['instancesInstanceKeyGroupsGroupIdLockPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function instancesInstanceKeyGroupsGroupIdLockPutAsync($instance_key, $locked, $group_id, string $contentType = self::contentTypes['instancesInstanceKeyGroupsGroupIdLockPut'][0])
    {
        return $this->instancesInstanceKeyGroupsGroupIdLockPutAsyncWithHttpInfo($instance_key, $locked, $group_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation instancesInstanceKeyGroupsGroupIdLockPutAsyncWithHttpInfo
     *
     * Set group locked.
     *
     * @param  string $instance_key Instance key (required)
     * @param  bool $locked Locked status (required)
     * @param  string $group_id Group id of the group (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['instancesInstanceKeyGroupsGroupIdLockPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function instancesInstanceKeyGroupsGroupIdLockPutAsyncWithHttpInfo($instance_key, $locked, $group_id, string $contentType = self::contentTypes['instancesInstanceKeyGroupsGroupIdLockPut'][0])
    {
        $returnType = '\WhatsAPI\models\APIResponse';
        $request = $this->instancesInstanceKeyGroupsGroupIdLockPutRequest($instance_key, $locked, $group_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'instancesInstanceKeyGroupsGroupIdLockPut'
     *
     * @param  string $instance_key Instance key (required)
     * @param  bool $locked Locked status (required)
     * @param  string $group_id Group id of the group (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['instancesInstanceKeyGroupsGroupIdLockPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function instancesInstanceKeyGroupsGroupIdLockPutRequest($instance_key, $locked, $group_id, string $contentType = self::contentTypes['instancesInstanceKeyGroupsGroupIdLockPut'][0])
    {

        // verify the required parameter 'instance_key' is set
        if ($instance_key === null || (is_array($instance_key) && count($instance_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $instance_key when calling instancesInstanceKeyGroupsGroupIdLockPut'
            );
        }

        // verify the required parameter 'locked' is set
        if ($locked === null || (is_array($locked) && count($locked) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $locked when calling instancesInstanceKeyGroupsGroupIdLockPut'
            );
        }

        // verify the required parameter 'group_id' is set
        if ($group_id === null || (is_array($group_id) && count($group_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $group_id when calling instancesInstanceKeyGroupsGroupIdLockPut'
            );
        }


        $resourcePath = '/instances/{instance_key}/groups/{group_id}/lock';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($instance_key !== null) {
            $resourcePath = str_replace(
                '{' . 'instance_key' . '}',
                ObjectSerializer::toPathValue($instance_key),
                $resourcePath
            );
        }
        // path params
        if ($locked !== null) {
            $resourcePath = str_replace(
                '{' . 'locked' . '}',
                ObjectSerializer::toPathValue($locked),
                $resourcePath
            );
        }
        // path params
        if ($group_id !== null) {
            $resourcePath = str_replace(
                '{' . 'group_id' . '}',
                ObjectSerializer::toPathValue($group_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation instancesInstanceKeyGroupsGroupIdNamePut
     *
     * Set group name.
     *
     * @param  string $instance_key Instance key (required)
     * @param  string $group_id Group id of the group (required)
     * @param  \WhatsAPI\models\GroupUpdateNamePayload $data Group name data (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['instancesInstanceKeyGroupsGroupIdNamePut'] to see the possible values for this operation
     *
     * @throws \WhatsAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \WhatsAPI\models\APIResponse|\WhatsAPI\models\APIResponse|\WhatsAPI\models\APIResponse|\WhatsAPI\models\APIResponse|\WhatsAPI\models\APIResponse
     */
    public function instancesInstanceKeyGroupsGroupIdNamePut($instance_key, $group_id, $data, string $contentType = self::contentTypes['instancesInstanceKeyGroupsGroupIdNamePut'][0])
    {
        list($response) = $this->instancesInstanceKeyGroupsGroupIdNamePutWithHttpInfo($instance_key, $group_id, $data, $contentType);
        return $response;
    }

    /**
     * Operation instancesInstanceKeyGroupsGroupIdNamePutWithHttpInfo
     *
     * Set group name.
     *
     * @param  string $instance_key Instance key (required)
     * @param  string $group_id Group id of the group (required)
     * @param  \WhatsAPI\models\GroupUpdateNamePayload $data Group name data (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['instancesInstanceKeyGroupsGroupIdNamePut'] to see the possible values for this operation
     *
     * @throws \WhatsAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \WhatsAPI\models\APIResponse|\WhatsAPI\models\APIResponse|\WhatsAPI\models\APIResponse|\WhatsAPI\models\APIResponse|\WhatsAPI\models\APIResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function instancesInstanceKeyGroupsGroupIdNamePutWithHttpInfo($instance_key, $group_id, $data, string $contentType = self::contentTypes['instancesInstanceKeyGroupsGroupIdNamePut'][0])
    {
        $request = $this->instancesInstanceKeyGroupsGroupIdNamePutRequest($instance_key, $group_id, $data, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\WhatsAPI\models\APIResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WhatsAPI\models\APIResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WhatsAPI\models\APIResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\WhatsAPI\models\APIResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WhatsAPI\models\APIResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WhatsAPI\models\APIResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\WhatsAPI\models\APIResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WhatsAPI\models\APIResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WhatsAPI\models\APIResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\WhatsAPI\models\APIResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WhatsAPI\models\APIResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WhatsAPI\models\APIResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\WhatsAPI\models\APIResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WhatsAPI\models\APIResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WhatsAPI\models\APIResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\WhatsAPI\models\APIResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WhatsAPI\models\APIResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WhatsAPI\models\APIResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WhatsAPI\models\APIResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WhatsAPI\models\APIResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WhatsAPI\models\APIResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation instancesInstanceKeyGroupsGroupIdNamePutAsync
     *
     * Set group name.
     *
     * @param  string $instance_key Instance key (required)
     * @param  string $group_id Group id of the group (required)
     * @param  \WhatsAPI\models\GroupUpdateNamePayload $data Group name data (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['instancesInstanceKeyGroupsGroupIdNamePut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function instancesInstanceKeyGroupsGroupIdNamePutAsync($instance_key, $group_id, $data, string $contentType = self::contentTypes['instancesInstanceKeyGroupsGroupIdNamePut'][0])
    {
        return $this->instancesInstanceKeyGroupsGroupIdNamePutAsyncWithHttpInfo($instance_key, $group_id, $data, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation instancesInstanceKeyGroupsGroupIdNamePutAsyncWithHttpInfo
     *
     * Set group name.
     *
     * @param  string $instance_key Instance key (required)
     * @param  string $group_id Group id of the group (required)
     * @param  \WhatsAPI\models\GroupUpdateNamePayload $data Group name data (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['instancesInstanceKeyGroupsGroupIdNamePut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function instancesInstanceKeyGroupsGroupIdNamePutAsyncWithHttpInfo($instance_key, $group_id, $data, string $contentType = self::contentTypes['instancesInstanceKeyGroupsGroupIdNamePut'][0])
    {
        $returnType = '\WhatsAPI\models\APIResponse';
        $request = $this->instancesInstanceKeyGroupsGroupIdNamePutRequest($instance_key, $group_id, $data, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'instancesInstanceKeyGroupsGroupIdNamePut'
     *
     * @param  string $instance_key Instance key (required)
     * @param  string $group_id Group id of the group (required)
     * @param  \WhatsAPI\models\GroupUpdateNamePayload $data Group name data (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['instancesInstanceKeyGroupsGroupIdNamePut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function instancesInstanceKeyGroupsGroupIdNamePutRequest($instance_key, $group_id, $data, string $contentType = self::contentTypes['instancesInstanceKeyGroupsGroupIdNamePut'][0])
    {

        // verify the required parameter 'instance_key' is set
        if ($instance_key === null || (is_array($instance_key) && count($instance_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $instance_key when calling instancesInstanceKeyGroupsGroupIdNamePut'
            );
        }

        // verify the required parameter 'group_id' is set
        if ($group_id === null || (is_array($group_id) && count($group_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $group_id when calling instancesInstanceKeyGroupsGroupIdNamePut'
            );
        }

        // verify the required parameter 'data' is set
        if ($data === null || (is_array($data) && count($data) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $data when calling instancesInstanceKeyGroupsGroupIdNamePut'
            );
        }


        $resourcePath = '/instances/{instance_key}/groups/{group_id}/name';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($instance_key !== null) {
            $resourcePath = str_replace(
                '{' . 'instance_key' . '}',
                ObjectSerializer::toPathValue($instance_key),
                $resourcePath
            );
        }
        // path params
        if ($group_id !== null) {
            $resourcePath = str_replace(
                '{' . 'group_id' . '}',
                ObjectSerializer::toPathValue($group_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($data)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($data));
            } else {
                $httpBody = $data;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation instancesInstanceKeyGroupsGroupIdParticipantsAddPost
     *
     * Add participant.
     *
     * @param  string $instance_key Instance key (required)
     * @param  string $group_id Group id of the group (required)
     * @param  \WhatsAPI\models\GroupUpdateParticipantsPayload $data Group update payload (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['instancesInstanceKeyGroupsGroupIdParticipantsAddPost'] to see the possible values for this operation
     *
     * @throws \WhatsAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \WhatsAPI\models\APIResponse|\WhatsAPI\models\APIResponse|\WhatsAPI\models\APIResponse|\WhatsAPI\models\APIResponse|\WhatsAPI\models\APIResponse
     */
    public function instancesInstanceKeyGroupsGroupIdParticipantsAddPost($instance_key, $group_id, $data, string $contentType = self::contentTypes['instancesInstanceKeyGroupsGroupIdParticipantsAddPost'][0])
    {
        list($response) = $this->instancesInstanceKeyGroupsGroupIdParticipantsAddPostWithHttpInfo($instance_key, $group_id, $data, $contentType);
        return $response;
    }

    /**
     * Operation instancesInstanceKeyGroupsGroupIdParticipantsAddPostWithHttpInfo
     *
     * Add participant.
     *
     * @param  string $instance_key Instance key (required)
     * @param  string $group_id Group id of the group (required)
     * @param  \WhatsAPI\models\GroupUpdateParticipantsPayload $data Group update payload (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['instancesInstanceKeyGroupsGroupIdParticipantsAddPost'] to see the possible values for this operation
     *
     * @throws \WhatsAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \WhatsAPI\models\APIResponse|\WhatsAPI\models\APIResponse|\WhatsAPI\models\APIResponse|\WhatsAPI\models\APIResponse|\WhatsAPI\models\APIResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function instancesInstanceKeyGroupsGroupIdParticipantsAddPostWithHttpInfo($instance_key, $group_id, $data, string $contentType = self::contentTypes['instancesInstanceKeyGroupsGroupIdParticipantsAddPost'][0])
    {
        $request = $this->instancesInstanceKeyGroupsGroupIdParticipantsAddPostRequest($instance_key, $group_id, $data, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\WhatsAPI\models\APIResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WhatsAPI\models\APIResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WhatsAPI\models\APIResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\WhatsAPI\models\APIResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WhatsAPI\models\APIResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WhatsAPI\models\APIResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\WhatsAPI\models\APIResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WhatsAPI\models\APIResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WhatsAPI\models\APIResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\WhatsAPI\models\APIResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WhatsAPI\models\APIResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WhatsAPI\models\APIResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\WhatsAPI\models\APIResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WhatsAPI\models\APIResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WhatsAPI\models\APIResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\WhatsAPI\models\APIResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WhatsAPI\models\APIResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WhatsAPI\models\APIResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WhatsAPI\models\APIResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WhatsAPI\models\APIResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WhatsAPI\models\APIResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation instancesInstanceKeyGroupsGroupIdParticipantsAddPostAsync
     *
     * Add participant.
     *
     * @param  string $instance_key Instance key (required)
     * @param  string $group_id Group id of the group (required)
     * @param  \WhatsAPI\models\GroupUpdateParticipantsPayload $data Group update payload (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['instancesInstanceKeyGroupsGroupIdParticipantsAddPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function instancesInstanceKeyGroupsGroupIdParticipantsAddPostAsync($instance_key, $group_id, $data, string $contentType = self::contentTypes['instancesInstanceKeyGroupsGroupIdParticipantsAddPost'][0])
    {
        return $this->instancesInstanceKeyGroupsGroupIdParticipantsAddPostAsyncWithHttpInfo($instance_key, $group_id, $data, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation instancesInstanceKeyGroupsGroupIdParticipantsAddPostAsyncWithHttpInfo
     *
     * Add participant.
     *
     * @param  string $instance_key Instance key (required)
     * @param  string $group_id Group id of the group (required)
     * @param  \WhatsAPI\models\GroupUpdateParticipantsPayload $data Group update payload (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['instancesInstanceKeyGroupsGroupIdParticipantsAddPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function instancesInstanceKeyGroupsGroupIdParticipantsAddPostAsyncWithHttpInfo($instance_key, $group_id, $data, string $contentType = self::contentTypes['instancesInstanceKeyGroupsGroupIdParticipantsAddPost'][0])
    {
        $returnType = '\WhatsAPI\models\APIResponse';
        $request = $this->instancesInstanceKeyGroupsGroupIdParticipantsAddPostRequest($instance_key, $group_id, $data, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'instancesInstanceKeyGroupsGroupIdParticipantsAddPost'
     *
     * @param  string $instance_key Instance key (required)
     * @param  string $group_id Group id of the group (required)
     * @param  \WhatsAPI\models\GroupUpdateParticipantsPayload $data Group update payload (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['instancesInstanceKeyGroupsGroupIdParticipantsAddPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function instancesInstanceKeyGroupsGroupIdParticipantsAddPostRequest($instance_key, $group_id, $data, string $contentType = self::contentTypes['instancesInstanceKeyGroupsGroupIdParticipantsAddPost'][0])
    {

        // verify the required parameter 'instance_key' is set
        if ($instance_key === null || (is_array($instance_key) && count($instance_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $instance_key when calling instancesInstanceKeyGroupsGroupIdParticipantsAddPost'
            );
        }

        // verify the required parameter 'group_id' is set
        if ($group_id === null || (is_array($group_id) && count($group_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $group_id when calling instancesInstanceKeyGroupsGroupIdParticipantsAddPost'
            );
        }

        // verify the required parameter 'data' is set
        if ($data === null || (is_array($data) && count($data) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $data when calling instancesInstanceKeyGroupsGroupIdParticipantsAddPost'
            );
        }


        $resourcePath = '/instances/{instance_key}/groups/{group_id}/participants/add';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($instance_key !== null) {
            $resourcePath = str_replace(
                '{' . 'instance_key' . '}',
                ObjectSerializer::toPathValue($instance_key),
                $resourcePath
            );
        }
        // path params
        if ($group_id !== null) {
            $resourcePath = str_replace(
                '{' . 'group_id' . '}',
                ObjectSerializer::toPathValue($group_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($data)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($data));
            } else {
                $httpBody = $data;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation instancesInstanceKeyGroupsGroupIdParticipantsDemotePut
     *
     * Demote participant.
     *
     * @param  string $instance_key Instance key (required)
     * @param  string $group_id Group id of the group (required)
     * @param  \WhatsAPI\models\GroupUpdateParticipantsPayload $data Group update payload (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['instancesInstanceKeyGroupsGroupIdParticipantsDemotePut'] to see the possible values for this operation
     *
     * @throws \WhatsAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \WhatsAPI\models\APIResponse|\WhatsAPI\models\APIResponse|\WhatsAPI\models\APIResponse|\WhatsAPI\models\APIResponse|\WhatsAPI\models\APIResponse
     */
    public function instancesInstanceKeyGroupsGroupIdParticipantsDemotePut($instance_key, $group_id, $data, string $contentType = self::contentTypes['instancesInstanceKeyGroupsGroupIdParticipantsDemotePut'][0])
    {
        list($response) = $this->instancesInstanceKeyGroupsGroupIdParticipantsDemotePutWithHttpInfo($instance_key, $group_id, $data, $contentType);
        return $response;
    }

    /**
     * Operation instancesInstanceKeyGroupsGroupIdParticipantsDemotePutWithHttpInfo
     *
     * Demote participant.
     *
     * @param  string $instance_key Instance key (required)
     * @param  string $group_id Group id of the group (required)
     * @param  \WhatsAPI\models\GroupUpdateParticipantsPayload $data Group update payload (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['instancesInstanceKeyGroupsGroupIdParticipantsDemotePut'] to see the possible values for this operation
     *
     * @throws \WhatsAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \WhatsAPI\models\APIResponse|\WhatsAPI\models\APIResponse|\WhatsAPI\models\APIResponse|\WhatsAPI\models\APIResponse|\WhatsAPI\models\APIResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function instancesInstanceKeyGroupsGroupIdParticipantsDemotePutWithHttpInfo($instance_key, $group_id, $data, string $contentType = self::contentTypes['instancesInstanceKeyGroupsGroupIdParticipantsDemotePut'][0])
    {
        $request = $this->instancesInstanceKeyGroupsGroupIdParticipantsDemotePutRequest($instance_key, $group_id, $data, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\WhatsAPI\models\APIResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WhatsAPI\models\APIResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WhatsAPI\models\APIResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\WhatsAPI\models\APIResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WhatsAPI\models\APIResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WhatsAPI\models\APIResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\WhatsAPI\models\APIResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WhatsAPI\models\APIResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WhatsAPI\models\APIResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\WhatsAPI\models\APIResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WhatsAPI\models\APIResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WhatsAPI\models\APIResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\WhatsAPI\models\APIResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WhatsAPI\models\APIResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WhatsAPI\models\APIResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\WhatsAPI\models\APIResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WhatsAPI\models\APIResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WhatsAPI\models\APIResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WhatsAPI\models\APIResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WhatsAPI\models\APIResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WhatsAPI\models\APIResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation instancesInstanceKeyGroupsGroupIdParticipantsDemotePutAsync
     *
     * Demote participant.
     *
     * @param  string $instance_key Instance key (required)
     * @param  string $group_id Group id of the group (required)
     * @param  \WhatsAPI\models\GroupUpdateParticipantsPayload $data Group update payload (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['instancesInstanceKeyGroupsGroupIdParticipantsDemotePut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function instancesInstanceKeyGroupsGroupIdParticipantsDemotePutAsync($instance_key, $group_id, $data, string $contentType = self::contentTypes['instancesInstanceKeyGroupsGroupIdParticipantsDemotePut'][0])
    {
        return $this->instancesInstanceKeyGroupsGroupIdParticipantsDemotePutAsyncWithHttpInfo($instance_key, $group_id, $data, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation instancesInstanceKeyGroupsGroupIdParticipantsDemotePutAsyncWithHttpInfo
     *
     * Demote participant.
     *
     * @param  string $instance_key Instance key (required)
     * @param  string $group_id Group id of the group (required)
     * @param  \WhatsAPI\models\GroupUpdateParticipantsPayload $data Group update payload (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['instancesInstanceKeyGroupsGroupIdParticipantsDemotePut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function instancesInstanceKeyGroupsGroupIdParticipantsDemotePutAsyncWithHttpInfo($instance_key, $group_id, $data, string $contentType = self::contentTypes['instancesInstanceKeyGroupsGroupIdParticipantsDemotePut'][0])
    {
        $returnType = '\WhatsAPI\models\APIResponse';
        $request = $this->instancesInstanceKeyGroupsGroupIdParticipantsDemotePutRequest($instance_key, $group_id, $data, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'instancesInstanceKeyGroupsGroupIdParticipantsDemotePut'
     *
     * @param  string $instance_key Instance key (required)
     * @param  string $group_id Group id of the group (required)
     * @param  \WhatsAPI\models\GroupUpdateParticipantsPayload $data Group update payload (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['instancesInstanceKeyGroupsGroupIdParticipantsDemotePut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function instancesInstanceKeyGroupsGroupIdParticipantsDemotePutRequest($instance_key, $group_id, $data, string $contentType = self::contentTypes['instancesInstanceKeyGroupsGroupIdParticipantsDemotePut'][0])
    {

        // verify the required parameter 'instance_key' is set
        if ($instance_key === null || (is_array($instance_key) && count($instance_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $instance_key when calling instancesInstanceKeyGroupsGroupIdParticipantsDemotePut'
            );
        }

        // verify the required parameter 'group_id' is set
        if ($group_id === null || (is_array($group_id) && count($group_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $group_id when calling instancesInstanceKeyGroupsGroupIdParticipantsDemotePut'
            );
        }

        // verify the required parameter 'data' is set
        if ($data === null || (is_array($data) && count($data) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $data when calling instancesInstanceKeyGroupsGroupIdParticipantsDemotePut'
            );
        }


        $resourcePath = '/instances/{instance_key}/groups/{group_id}/participants/demote';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($instance_key !== null) {
            $resourcePath = str_replace(
                '{' . 'instance_key' . '}',
                ObjectSerializer::toPathValue($instance_key),
                $resourcePath
            );
        }
        // path params
        if ($group_id !== null) {
            $resourcePath = str_replace(
                '{' . 'group_id' . '}',
                ObjectSerializer::toPathValue($group_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($data)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($data));
            } else {
                $httpBody = $data;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation instancesInstanceKeyGroupsGroupIdParticipantsPromotePut
     *
     * Promote participant.
     *
     * @param  string $instance_key Instance key (required)
     * @param  string $group_id Group id of the group (required)
     * @param  \WhatsAPI\models\GroupUpdateParticipantsPayload $data Group update payload (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['instancesInstanceKeyGroupsGroupIdParticipantsPromotePut'] to see the possible values for this operation
     *
     * @throws \WhatsAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \WhatsAPI\models\APIResponse|\WhatsAPI\models\APIResponse|\WhatsAPI\models\APIResponse|\WhatsAPI\models\APIResponse|\WhatsAPI\models\APIResponse
     */
    public function instancesInstanceKeyGroupsGroupIdParticipantsPromotePut($instance_key, $group_id, $data, string $contentType = self::contentTypes['instancesInstanceKeyGroupsGroupIdParticipantsPromotePut'][0])
    {
        list($response) = $this->instancesInstanceKeyGroupsGroupIdParticipantsPromotePutWithHttpInfo($instance_key, $group_id, $data, $contentType);
        return $response;
    }

    /**
     * Operation instancesInstanceKeyGroupsGroupIdParticipantsPromotePutWithHttpInfo
     *
     * Promote participant.
     *
     * @param  string $instance_key Instance key (required)
     * @param  string $group_id Group id of the group (required)
     * @param  \WhatsAPI\models\GroupUpdateParticipantsPayload $data Group update payload (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['instancesInstanceKeyGroupsGroupIdParticipantsPromotePut'] to see the possible values for this operation
     *
     * @throws \WhatsAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \WhatsAPI\models\APIResponse|\WhatsAPI\models\APIResponse|\WhatsAPI\models\APIResponse|\WhatsAPI\models\APIResponse|\WhatsAPI\models\APIResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function instancesInstanceKeyGroupsGroupIdParticipantsPromotePutWithHttpInfo($instance_key, $group_id, $data, string $contentType = self::contentTypes['instancesInstanceKeyGroupsGroupIdParticipantsPromotePut'][0])
    {
        $request = $this->instancesInstanceKeyGroupsGroupIdParticipantsPromotePutRequest($instance_key, $group_id, $data, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\WhatsAPI\models\APIResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WhatsAPI\models\APIResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WhatsAPI\models\APIResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\WhatsAPI\models\APIResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WhatsAPI\models\APIResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WhatsAPI\models\APIResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\WhatsAPI\models\APIResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WhatsAPI\models\APIResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WhatsAPI\models\APIResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\WhatsAPI\models\APIResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WhatsAPI\models\APIResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WhatsAPI\models\APIResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\WhatsAPI\models\APIResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WhatsAPI\models\APIResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WhatsAPI\models\APIResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\WhatsAPI\models\APIResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WhatsAPI\models\APIResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WhatsAPI\models\APIResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WhatsAPI\models\APIResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WhatsAPI\models\APIResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WhatsAPI\models\APIResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation instancesInstanceKeyGroupsGroupIdParticipantsPromotePutAsync
     *
     * Promote participant.
     *
     * @param  string $instance_key Instance key (required)
     * @param  string $group_id Group id of the group (required)
     * @param  \WhatsAPI\models\GroupUpdateParticipantsPayload $data Group update payload (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['instancesInstanceKeyGroupsGroupIdParticipantsPromotePut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function instancesInstanceKeyGroupsGroupIdParticipantsPromotePutAsync($instance_key, $group_id, $data, string $contentType = self::contentTypes['instancesInstanceKeyGroupsGroupIdParticipantsPromotePut'][0])
    {
        return $this->instancesInstanceKeyGroupsGroupIdParticipantsPromotePutAsyncWithHttpInfo($instance_key, $group_id, $data, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation instancesInstanceKeyGroupsGroupIdParticipantsPromotePutAsyncWithHttpInfo
     *
     * Promote participant.
     *
     * @param  string $instance_key Instance key (required)
     * @param  string $group_id Group id of the group (required)
     * @param  \WhatsAPI\models\GroupUpdateParticipantsPayload $data Group update payload (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['instancesInstanceKeyGroupsGroupIdParticipantsPromotePut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function instancesInstanceKeyGroupsGroupIdParticipantsPromotePutAsyncWithHttpInfo($instance_key, $group_id, $data, string $contentType = self::contentTypes['instancesInstanceKeyGroupsGroupIdParticipantsPromotePut'][0])
    {
        $returnType = '\WhatsAPI\models\APIResponse';
        $request = $this->instancesInstanceKeyGroupsGroupIdParticipantsPromotePutRequest($instance_key, $group_id, $data, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'instancesInstanceKeyGroupsGroupIdParticipantsPromotePut'
     *
     * @param  string $instance_key Instance key (required)
     * @param  string $group_id Group id of the group (required)
     * @param  \WhatsAPI\models\GroupUpdateParticipantsPayload $data Group update payload (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['instancesInstanceKeyGroupsGroupIdParticipantsPromotePut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function instancesInstanceKeyGroupsGroupIdParticipantsPromotePutRequest($instance_key, $group_id, $data, string $contentType = self::contentTypes['instancesInstanceKeyGroupsGroupIdParticipantsPromotePut'][0])
    {

        // verify the required parameter 'instance_key' is set
        if ($instance_key === null || (is_array($instance_key) && count($instance_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $instance_key when calling instancesInstanceKeyGroupsGroupIdParticipantsPromotePut'
            );
        }

        // verify the required parameter 'group_id' is set
        if ($group_id === null || (is_array($group_id) && count($group_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $group_id when calling instancesInstanceKeyGroupsGroupIdParticipantsPromotePut'
            );
        }

        // verify the required parameter 'data' is set
        if ($data === null || (is_array($data) && count($data) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $data when calling instancesInstanceKeyGroupsGroupIdParticipantsPromotePut'
            );
        }


        $resourcePath = '/instances/{instance_key}/groups/{group_id}/participants/promote';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($instance_key !== null) {
            $resourcePath = str_replace(
                '{' . 'instance_key' . '}',
                ObjectSerializer::toPathValue($instance_key),
                $resourcePath
            );
        }
        // path params
        if ($group_id !== null) {
            $resourcePath = str_replace(
                '{' . 'group_id' . '}',
                ObjectSerializer::toPathValue($group_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($data)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($data));
            } else {
                $httpBody = $data;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation instancesInstanceKeyGroupsGroupIdParticipantsRemoveDelete
     *
     * Remove participant.
     *
     * @param  string $instance_key Instance key (required)
     * @param  string $group_id Group id of the group (required)
     * @param  \WhatsAPI\models\GroupUpdateParticipantsPayload $data Group update payload (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['instancesInstanceKeyGroupsGroupIdParticipantsRemoveDelete'] to see the possible values for this operation
     *
     * @throws \WhatsAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \WhatsAPI\models\APIResponse|\WhatsAPI\models\APIResponse|\WhatsAPI\models\APIResponse|\WhatsAPI\models\APIResponse|\WhatsAPI\models\APIResponse
     */
    public function instancesInstanceKeyGroupsGroupIdParticipantsRemoveDelete($instance_key, $group_id, $data, string $contentType = self::contentTypes['instancesInstanceKeyGroupsGroupIdParticipantsRemoveDelete'][0])
    {
        list($response) = $this->instancesInstanceKeyGroupsGroupIdParticipantsRemoveDeleteWithHttpInfo($instance_key, $group_id, $data, $contentType);
        return $response;
    }

    /**
     * Operation instancesInstanceKeyGroupsGroupIdParticipantsRemoveDeleteWithHttpInfo
     *
     * Remove participant.
     *
     * @param  string $instance_key Instance key (required)
     * @param  string $group_id Group id of the group (required)
     * @param  \WhatsAPI\models\GroupUpdateParticipantsPayload $data Group update payload (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['instancesInstanceKeyGroupsGroupIdParticipantsRemoveDelete'] to see the possible values for this operation
     *
     * @throws \WhatsAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \WhatsAPI\models\APIResponse|\WhatsAPI\models\APIResponse|\WhatsAPI\models\APIResponse|\WhatsAPI\models\APIResponse|\WhatsAPI\models\APIResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function instancesInstanceKeyGroupsGroupIdParticipantsRemoveDeleteWithHttpInfo($instance_key, $group_id, $data, string $contentType = self::contentTypes['instancesInstanceKeyGroupsGroupIdParticipantsRemoveDelete'][0])
    {
        $request = $this->instancesInstanceKeyGroupsGroupIdParticipantsRemoveDeleteRequest($instance_key, $group_id, $data, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\WhatsAPI\models\APIResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WhatsAPI\models\APIResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WhatsAPI\models\APIResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\WhatsAPI\models\APIResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WhatsAPI\models\APIResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WhatsAPI\models\APIResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\WhatsAPI\models\APIResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WhatsAPI\models\APIResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WhatsAPI\models\APIResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\WhatsAPI\models\APIResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WhatsAPI\models\APIResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WhatsAPI\models\APIResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\WhatsAPI\models\APIResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WhatsAPI\models\APIResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WhatsAPI\models\APIResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\WhatsAPI\models\APIResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WhatsAPI\models\APIResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WhatsAPI\models\APIResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WhatsAPI\models\APIResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WhatsAPI\models\APIResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WhatsAPI\models\APIResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation instancesInstanceKeyGroupsGroupIdParticipantsRemoveDeleteAsync
     *
     * Remove participant.
     *
     * @param  string $instance_key Instance key (required)
     * @param  string $group_id Group id of the group (required)
     * @param  \WhatsAPI\models\GroupUpdateParticipantsPayload $data Group update payload (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['instancesInstanceKeyGroupsGroupIdParticipantsRemoveDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function instancesInstanceKeyGroupsGroupIdParticipantsRemoveDeleteAsync($instance_key, $group_id, $data, string $contentType = self::contentTypes['instancesInstanceKeyGroupsGroupIdParticipantsRemoveDelete'][0])
    {
        return $this->instancesInstanceKeyGroupsGroupIdParticipantsRemoveDeleteAsyncWithHttpInfo($instance_key, $group_id, $data, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation instancesInstanceKeyGroupsGroupIdParticipantsRemoveDeleteAsyncWithHttpInfo
     *
     * Remove participant.
     *
     * @param  string $instance_key Instance key (required)
     * @param  string $group_id Group id of the group (required)
     * @param  \WhatsAPI\models\GroupUpdateParticipantsPayload $data Group update payload (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['instancesInstanceKeyGroupsGroupIdParticipantsRemoveDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function instancesInstanceKeyGroupsGroupIdParticipantsRemoveDeleteAsyncWithHttpInfo($instance_key, $group_id, $data, string $contentType = self::contentTypes['instancesInstanceKeyGroupsGroupIdParticipantsRemoveDelete'][0])
    {
        $returnType = '\WhatsAPI\models\APIResponse';
        $request = $this->instancesInstanceKeyGroupsGroupIdParticipantsRemoveDeleteRequest($instance_key, $group_id, $data, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'instancesInstanceKeyGroupsGroupIdParticipantsRemoveDelete'
     *
     * @param  string $instance_key Instance key (required)
     * @param  string $group_id Group id of the group (required)
     * @param  \WhatsAPI\models\GroupUpdateParticipantsPayload $data Group update payload (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['instancesInstanceKeyGroupsGroupIdParticipantsRemoveDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function instancesInstanceKeyGroupsGroupIdParticipantsRemoveDeleteRequest($instance_key, $group_id, $data, string $contentType = self::contentTypes['instancesInstanceKeyGroupsGroupIdParticipantsRemoveDelete'][0])
    {

        // verify the required parameter 'instance_key' is set
        if ($instance_key === null || (is_array($instance_key) && count($instance_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $instance_key when calling instancesInstanceKeyGroupsGroupIdParticipantsRemoveDelete'
            );
        }

        // verify the required parameter 'group_id' is set
        if ($group_id === null || (is_array($group_id) && count($group_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $group_id when calling instancesInstanceKeyGroupsGroupIdParticipantsRemoveDelete'
            );
        }

        // verify the required parameter 'data' is set
        if ($data === null || (is_array($data) && count($data) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $data when calling instancesInstanceKeyGroupsGroupIdParticipantsRemoveDelete'
            );
        }


        $resourcePath = '/instances/{instance_key}/groups/{group_id}/participants/remove';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($instance_key !== null) {
            $resourcePath = str_replace(
                '{' . 'instance_key' . '}',
                ObjectSerializer::toPathValue($instance_key),
                $resourcePath
            );
        }
        // path params
        if ($group_id !== null) {
            $resourcePath = str_replace(
                '{' . 'group_id' . '}',
                ObjectSerializer::toPathValue($group_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($data)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($data));
            } else {
                $httpBody = $data;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation instancesInstanceKeyGroupsGroupIdProfilePicPut
     *
     * Set group picture.
     *
     * @param  string $instance_key Instance key (required)
     * @param  string $group_id Group id of the group (required)
     * @param  \WhatsAPI\models\InstancesInstanceKeyGroupsGroupIdProfilePicPutRequest $instances_instance_key_groups_group_id_profile_pic_put_request instances_instance_key_groups_group_id_profile_pic_put_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['instancesInstanceKeyGroupsGroupIdProfilePicPut'] to see the possible values for this operation
     *
     * @throws \WhatsAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \WhatsAPI\models\APIResponse|\WhatsAPI\models\APIResponse|\WhatsAPI\models\APIResponse|\WhatsAPI\models\APIResponse|\WhatsAPI\models\APIResponse
     */
    public function instancesInstanceKeyGroupsGroupIdProfilePicPut($instance_key, $group_id, $instances_instance_key_groups_group_id_profile_pic_put_request, string $contentType = self::contentTypes['instancesInstanceKeyGroupsGroupIdProfilePicPut'][0])
    {
        list($response) = $this->instancesInstanceKeyGroupsGroupIdProfilePicPutWithHttpInfo($instance_key, $group_id, $instances_instance_key_groups_group_id_profile_pic_put_request, $contentType);
        return $response;
    }

    /**
     * Operation instancesInstanceKeyGroupsGroupIdProfilePicPutWithHttpInfo
     *
     * Set group picture.
     *
     * @param  string $instance_key Instance key (required)
     * @param  string $group_id Group id of the group (required)
     * @param  \WhatsAPI\models\InstancesInstanceKeyGroupsGroupIdProfilePicPutRequest $instances_instance_key_groups_group_id_profile_pic_put_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['instancesInstanceKeyGroupsGroupIdProfilePicPut'] to see the possible values for this operation
     *
     * @throws \WhatsAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \WhatsAPI\models\APIResponse|\WhatsAPI\models\APIResponse|\WhatsAPI\models\APIResponse|\WhatsAPI\models\APIResponse|\WhatsAPI\models\APIResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function instancesInstanceKeyGroupsGroupIdProfilePicPutWithHttpInfo($instance_key, $group_id, $instances_instance_key_groups_group_id_profile_pic_put_request, string $contentType = self::contentTypes['instancesInstanceKeyGroupsGroupIdProfilePicPut'][0])
    {
        $request = $this->instancesInstanceKeyGroupsGroupIdProfilePicPutRequest($instance_key, $group_id, $instances_instance_key_groups_group_id_profile_pic_put_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\WhatsAPI\models\APIResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WhatsAPI\models\APIResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WhatsAPI\models\APIResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\WhatsAPI\models\APIResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WhatsAPI\models\APIResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WhatsAPI\models\APIResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\WhatsAPI\models\APIResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WhatsAPI\models\APIResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WhatsAPI\models\APIResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\WhatsAPI\models\APIResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WhatsAPI\models\APIResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WhatsAPI\models\APIResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\WhatsAPI\models\APIResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WhatsAPI\models\APIResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WhatsAPI\models\APIResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\WhatsAPI\models\APIResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WhatsAPI\models\APIResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WhatsAPI\models\APIResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WhatsAPI\models\APIResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WhatsAPI\models\APIResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WhatsAPI\models\APIResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation instancesInstanceKeyGroupsGroupIdProfilePicPutAsync
     *
     * Set group picture.
     *
     * @param  string $instance_key Instance key (required)
     * @param  string $group_id Group id of the group (required)
     * @param  \WhatsAPI\models\InstancesInstanceKeyGroupsGroupIdProfilePicPutRequest $instances_instance_key_groups_group_id_profile_pic_put_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['instancesInstanceKeyGroupsGroupIdProfilePicPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function instancesInstanceKeyGroupsGroupIdProfilePicPutAsync($instance_key, $group_id, $instances_instance_key_groups_group_id_profile_pic_put_request, string $contentType = self::contentTypes['instancesInstanceKeyGroupsGroupIdProfilePicPut'][0])
    {
        return $this->instancesInstanceKeyGroupsGroupIdProfilePicPutAsyncWithHttpInfo($instance_key, $group_id, $instances_instance_key_groups_group_id_profile_pic_put_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation instancesInstanceKeyGroupsGroupIdProfilePicPutAsyncWithHttpInfo
     *
     * Set group picture.
     *
     * @param  string $instance_key Instance key (required)
     * @param  string $group_id Group id of the group (required)
     * @param  \WhatsAPI\models\InstancesInstanceKeyGroupsGroupIdProfilePicPutRequest $instances_instance_key_groups_group_id_profile_pic_put_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['instancesInstanceKeyGroupsGroupIdProfilePicPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function instancesInstanceKeyGroupsGroupIdProfilePicPutAsyncWithHttpInfo($instance_key, $group_id, $instances_instance_key_groups_group_id_profile_pic_put_request, string $contentType = self::contentTypes['instancesInstanceKeyGroupsGroupIdProfilePicPut'][0])
    {
        $returnType = '\WhatsAPI\models\APIResponse';
        $request = $this->instancesInstanceKeyGroupsGroupIdProfilePicPutRequest($instance_key, $group_id, $instances_instance_key_groups_group_id_profile_pic_put_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'instancesInstanceKeyGroupsGroupIdProfilePicPut'
     *
     * @param  string $instance_key Instance key (required)
     * @param  string $group_id Group id of the group (required)
     * @param  \WhatsAPI\models\InstancesInstanceKeyGroupsGroupIdProfilePicPutRequest $instances_instance_key_groups_group_id_profile_pic_put_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['instancesInstanceKeyGroupsGroupIdProfilePicPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function instancesInstanceKeyGroupsGroupIdProfilePicPutRequest($instance_key, $group_id, $instances_instance_key_groups_group_id_profile_pic_put_request, string $contentType = self::contentTypes['instancesInstanceKeyGroupsGroupIdProfilePicPut'][0])
    {

        // verify the required parameter 'instance_key' is set
        if ($instance_key === null || (is_array($instance_key) && count($instance_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $instance_key when calling instancesInstanceKeyGroupsGroupIdProfilePicPut'
            );
        }

        // verify the required parameter 'group_id' is set
        if ($group_id === null || (is_array($group_id) && count($group_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $group_id when calling instancesInstanceKeyGroupsGroupIdProfilePicPut'
            );
        }

        // verify the required parameter 'instances_instance_key_groups_group_id_profile_pic_put_request' is set
        if ($instances_instance_key_groups_group_id_profile_pic_put_request === null || (is_array($instances_instance_key_groups_group_id_profile_pic_put_request) && count($instances_instance_key_groups_group_id_profile_pic_put_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $instances_instance_key_groups_group_id_profile_pic_put_request when calling instancesInstanceKeyGroupsGroupIdProfilePicPut'
            );
        }


        $resourcePath = '/instances/{instance_key}/groups/{group_id}/profile-pic';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($instance_key !== null) {
            $resourcePath = str_replace(
                '{' . 'instance_key' . '}',
                ObjectSerializer::toPathValue($instance_key),
                $resourcePath
            );
        }
        // path params
        if ($group_id !== null) {
            $resourcePath = str_replace(
                '{' . 'group_id' . '}',
                ObjectSerializer::toPathValue($group_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($instances_instance_key_groups_group_id_profile_pic_put_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($instances_instance_key_groups_group_id_profile_pic_put_request));
            } else {
                $httpBody = $instances_instance_key_groups_group_id_profile_pic_put_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation instancesInstanceKeyGroupsInviteInfoGet
     *
     * Get group from invite link.
     *
     * @param  string $instance_key Instance key (required)
     * @param  string $invite_link The invite link to check (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['instancesInstanceKeyGroupsInviteInfoGet'] to see the possible values for this operation
     *
     * @throws \WhatsAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \WhatsAPI\models\APIResponse|\WhatsAPI\models\APIResponse|\WhatsAPI\models\APIResponse|\WhatsAPI\models\APIResponse|\WhatsAPI\models\APIResponse
     */
    public function instancesInstanceKeyGroupsInviteInfoGet($instance_key, $invite_link, string $contentType = self::contentTypes['instancesInstanceKeyGroupsInviteInfoGet'][0])
    {
        list($response) = $this->instancesInstanceKeyGroupsInviteInfoGetWithHttpInfo($instance_key, $invite_link, $contentType);
        return $response;
    }

    /**
     * Operation instancesInstanceKeyGroupsInviteInfoGetWithHttpInfo
     *
     * Get group from invite link.
     *
     * @param  string $instance_key Instance key (required)
     * @param  string $invite_link The invite link to check (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['instancesInstanceKeyGroupsInviteInfoGet'] to see the possible values for this operation
     *
     * @throws \WhatsAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \WhatsAPI\models\APIResponse|\WhatsAPI\models\APIResponse|\WhatsAPI\models\APIResponse|\WhatsAPI\models\APIResponse|\WhatsAPI\models\APIResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function instancesInstanceKeyGroupsInviteInfoGetWithHttpInfo($instance_key, $invite_link, string $contentType = self::contentTypes['instancesInstanceKeyGroupsInviteInfoGet'][0])
    {
        $request = $this->instancesInstanceKeyGroupsInviteInfoGetRequest($instance_key, $invite_link, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\WhatsAPI\models\APIResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WhatsAPI\models\APIResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WhatsAPI\models\APIResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\WhatsAPI\models\APIResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WhatsAPI\models\APIResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WhatsAPI\models\APIResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\WhatsAPI\models\APIResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WhatsAPI\models\APIResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WhatsAPI\models\APIResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\WhatsAPI\models\APIResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WhatsAPI\models\APIResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WhatsAPI\models\APIResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\WhatsAPI\models\APIResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WhatsAPI\models\APIResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WhatsAPI\models\APIResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\WhatsAPI\models\APIResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WhatsAPI\models\APIResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WhatsAPI\models\APIResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WhatsAPI\models\APIResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WhatsAPI\models\APIResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WhatsAPI\models\APIResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation instancesInstanceKeyGroupsInviteInfoGetAsync
     *
     * Get group from invite link.
     *
     * @param  string $instance_key Instance key (required)
     * @param  string $invite_link The invite link to check (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['instancesInstanceKeyGroupsInviteInfoGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function instancesInstanceKeyGroupsInviteInfoGetAsync($instance_key, $invite_link, string $contentType = self::contentTypes['instancesInstanceKeyGroupsInviteInfoGet'][0])
    {
        return $this->instancesInstanceKeyGroupsInviteInfoGetAsyncWithHttpInfo($instance_key, $invite_link, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation instancesInstanceKeyGroupsInviteInfoGetAsyncWithHttpInfo
     *
     * Get group from invite link.
     *
     * @param  string $instance_key Instance key (required)
     * @param  string $invite_link The invite link to check (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['instancesInstanceKeyGroupsInviteInfoGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function instancesInstanceKeyGroupsInviteInfoGetAsyncWithHttpInfo($instance_key, $invite_link, string $contentType = self::contentTypes['instancesInstanceKeyGroupsInviteInfoGet'][0])
    {
        $returnType = '\WhatsAPI\models\APIResponse';
        $request = $this->instancesInstanceKeyGroupsInviteInfoGetRequest($instance_key, $invite_link, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'instancesInstanceKeyGroupsInviteInfoGet'
     *
     * @param  string $instance_key Instance key (required)
     * @param  string $invite_link The invite link to check (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['instancesInstanceKeyGroupsInviteInfoGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function instancesInstanceKeyGroupsInviteInfoGetRequest($instance_key, $invite_link, string $contentType = self::contentTypes['instancesInstanceKeyGroupsInviteInfoGet'][0])
    {

        // verify the required parameter 'instance_key' is set
        if ($instance_key === null || (is_array($instance_key) && count($instance_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $instance_key when calling instancesInstanceKeyGroupsInviteInfoGet'
            );
        }

        // verify the required parameter 'invite_link' is set
        if ($invite_link === null || (is_array($invite_link) && count($invite_link) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $invite_link when calling instancesInstanceKeyGroupsInviteInfoGet'
            );
        }


        $resourcePath = '/instances/{instance_key}/groups/invite-info';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $invite_link,
            'invite_link', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            true // required
        ) ?? []);


        // path params
        if ($instance_key !== null) {
            $resourcePath = str_replace(
                '{' . 'instance_key' . '}',
                ObjectSerializer::toPathValue($instance_key),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
