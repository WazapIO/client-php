<?php
/**
 * MessageSendingApi
 * PHP version 7.4
 *
 * @category Class
 * @package  whatsapi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * WhatsAPI Go
 *
 * The V2 of WhatsAPI Go
 *
 * The version of the OpenAPI document: 2.0
 * Contact: manjit@sponsorbook.io
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.2.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace whatsapi\whatsapi;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use whatsapi\ApiException;
use whatsapi\Configuration;
use whatsapi\HeaderSelector;
use whatsapi\ObjectSerializer;

/**
 * MessageSendingApi Class Doc Comment
 *
 * @category Class
 * @package  whatsapi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class MessageSendingApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'instancesInstanceKeyBusinessCatalogGet' => [
            'application/json',
        ],
        'instancesInstanceKeySendAudioPost' => [
            'application/json',
        ],
        'instancesInstanceKeySendButtonMediaPost' => [
            'application/json',
        ],
        'instancesInstanceKeySendButtonsPost' => [
            'application/json',
        ],
        'instancesInstanceKeySendContactPost' => [
            'application/json',
        ],
        'instancesInstanceKeySendDocumentPost' => [
            'application/json',
        ],
        'instancesInstanceKeySendImagePost' => [
            'application/json',
        ],
        'instancesInstanceKeySendListPost' => [
            'application/json',
        ],
        'instancesInstanceKeySendLocationPost' => [
            'application/json',
        ],
        'instancesInstanceKeySendMediaPost' => [
            'application/json',
        ],
        'instancesInstanceKeySendPollPost' => [
            'application/json',
        ],
        'instancesInstanceKeySendTemplateMediaPost' => [
            'application/json',
        ],
        'instancesInstanceKeySendTemplatePost' => [
            'application/json',
        ],
        'instancesInstanceKeySendTextPost' => [
            'application/json',
        ],
        'instancesInstanceKeySendUploadPost' => [
            'application/json',
        ],
        'instancesInstanceKeySendVideoPost' => [
            'application/json',
        ],
    ];

/**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation instancesInstanceKeyBusinessCatalogGet
     *
     * Fetches the catlog.
     *
     * @param  string $instance_key Instance key (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['instancesInstanceKeyBusinessCatalogGet'] to see the possible values for this operation
     *
     * @throws \whatsapi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \whatsapi\models\MainAPIResponse|\whatsapi\models\MainAPIResponse|\whatsapi\models\MainAPIResponse|\whatsapi\models\MainAPIResponse|\whatsapi\models\MainAPIResponse
     */
    public function instancesInstanceKeyBusinessCatalogGet($instance_key, string $contentType = self::contentTypes['instancesInstanceKeyBusinessCatalogGet'][0])
    {
        list($response) = $this->instancesInstanceKeyBusinessCatalogGetWithHttpInfo($instance_key, $contentType);
        return $response;
    }

    /**
     * Operation instancesInstanceKeyBusinessCatalogGetWithHttpInfo
     *
     * Fetches the catlog.
     *
     * @param  string $instance_key Instance key (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['instancesInstanceKeyBusinessCatalogGet'] to see the possible values for this operation
     *
     * @throws \whatsapi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \whatsapi\models\MainAPIResponse|\whatsapi\models\MainAPIResponse|\whatsapi\models\MainAPIResponse|\whatsapi\models\MainAPIResponse|\whatsapi\models\MainAPIResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function instancesInstanceKeyBusinessCatalogGetWithHttpInfo($instance_key, string $contentType = self::contentTypes['instancesInstanceKeyBusinessCatalogGet'][0])
    {
        $request = $this->instancesInstanceKeyBusinessCatalogGetRequest($instance_key, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\whatsapi\models\MainAPIResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\whatsapi\models\MainAPIResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\whatsapi\models\MainAPIResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\whatsapi\models\MainAPIResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\whatsapi\models\MainAPIResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\whatsapi\models\MainAPIResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\whatsapi\models\MainAPIResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\whatsapi\models\MainAPIResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\whatsapi\models\MainAPIResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\whatsapi\models\MainAPIResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\whatsapi\models\MainAPIResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\whatsapi\models\MainAPIResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\whatsapi\models\MainAPIResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\whatsapi\models\MainAPIResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\whatsapi\models\MainAPIResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\whatsapi\models\MainAPIResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\whatsapi\models\MainAPIResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\whatsapi\models\MainAPIResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\whatsapi\models\MainAPIResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\whatsapi\models\MainAPIResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\whatsapi\models\MainAPIResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation instancesInstanceKeyBusinessCatalogGetAsync
     *
     * Fetches the catlog.
     *
     * @param  string $instance_key Instance key (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['instancesInstanceKeyBusinessCatalogGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function instancesInstanceKeyBusinessCatalogGetAsync($instance_key, string $contentType = self::contentTypes['instancesInstanceKeyBusinessCatalogGet'][0])
    {
        return $this->instancesInstanceKeyBusinessCatalogGetAsyncWithHttpInfo($instance_key, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation instancesInstanceKeyBusinessCatalogGetAsyncWithHttpInfo
     *
     * Fetches the catlog.
     *
     * @param  string $instance_key Instance key (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['instancesInstanceKeyBusinessCatalogGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function instancesInstanceKeyBusinessCatalogGetAsyncWithHttpInfo($instance_key, string $contentType = self::contentTypes['instancesInstanceKeyBusinessCatalogGet'][0])
    {
        $returnType = '\whatsapi\models\MainAPIResponse';
        $request = $this->instancesInstanceKeyBusinessCatalogGetRequest($instance_key, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'instancesInstanceKeyBusinessCatalogGet'
     *
     * @param  string $instance_key Instance key (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['instancesInstanceKeyBusinessCatalogGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function instancesInstanceKeyBusinessCatalogGetRequest($instance_key, string $contentType = self::contentTypes['instancesInstanceKeyBusinessCatalogGet'][0])
    {

        // verify the required parameter 'instance_key' is set
        if ($instance_key === null || (is_array($instance_key) && count($instance_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $instance_key when calling instancesInstanceKeyBusinessCatalogGet'
            );
        }


        $resourcePath = '/instances/{instance_key}/business/catalog';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($instance_key !== null) {
            $resourcePath = str_replace(
                '{' . 'instance_key' . '}',
                ObjectSerializer::toPathValue($instance_key),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation instancesInstanceKeySendAudioPost
     *
     * Send raw audio.
     *
     * @param  string $instance_key Instance key (required)
     * @param  string $to The recipient&#39;s number (required)
     * @param  \whatsapi\models\InstancesInstanceKeySendAudioPostRequest $instances_instance_key_send_audio_post_request instances_instance_key_send_audio_post_request (required)
     * @param  string $caption Attached caption (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['instancesInstanceKeySendAudioPost'] to see the possible values for this operation
     *
     * @throws \whatsapi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \whatsapi\models\MainAPIResponse|\whatsapi\models\MainAPIResponse|\whatsapi\models\MainAPIResponse|\whatsapi\models\MainAPIResponse|\whatsapi\models\MainAPIResponse
     */
    public function instancesInstanceKeySendAudioPost($instance_key, $to, $instances_instance_key_send_audio_post_request, $caption = null, string $contentType = self::contentTypes['instancesInstanceKeySendAudioPost'][0])
    {
        list($response) = $this->instancesInstanceKeySendAudioPostWithHttpInfo($instance_key, $to, $instances_instance_key_send_audio_post_request, $caption, $contentType);
        return $response;
    }

    /**
     * Operation instancesInstanceKeySendAudioPostWithHttpInfo
     *
     * Send raw audio.
     *
     * @param  string $instance_key Instance key (required)
     * @param  string $to The recipient&#39;s number (required)
     * @param  \whatsapi\models\InstancesInstanceKeySendAudioPostRequest $instances_instance_key_send_audio_post_request (required)
     * @param  string $caption Attached caption (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['instancesInstanceKeySendAudioPost'] to see the possible values for this operation
     *
     * @throws \whatsapi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \whatsapi\models\MainAPIResponse|\whatsapi\models\MainAPIResponse|\whatsapi\models\MainAPIResponse|\whatsapi\models\MainAPIResponse|\whatsapi\models\MainAPIResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function instancesInstanceKeySendAudioPostWithHttpInfo($instance_key, $to, $instances_instance_key_send_audio_post_request, $caption = null, string $contentType = self::contentTypes['instancesInstanceKeySendAudioPost'][0])
    {
        $request = $this->instancesInstanceKeySendAudioPostRequest($instance_key, $to, $instances_instance_key_send_audio_post_request, $caption, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\whatsapi\models\MainAPIResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\whatsapi\models\MainAPIResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\whatsapi\models\MainAPIResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\whatsapi\models\MainAPIResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\whatsapi\models\MainAPIResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\whatsapi\models\MainAPIResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\whatsapi\models\MainAPIResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\whatsapi\models\MainAPIResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\whatsapi\models\MainAPIResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\whatsapi\models\MainAPIResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\whatsapi\models\MainAPIResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\whatsapi\models\MainAPIResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\whatsapi\models\MainAPIResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\whatsapi\models\MainAPIResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\whatsapi\models\MainAPIResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\whatsapi\models\MainAPIResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\whatsapi\models\MainAPIResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\whatsapi\models\MainAPIResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\whatsapi\models\MainAPIResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\whatsapi\models\MainAPIResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\whatsapi\models\MainAPIResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation instancesInstanceKeySendAudioPostAsync
     *
     * Send raw audio.
     *
     * @param  string $instance_key Instance key (required)
     * @param  string $to The recipient&#39;s number (required)
     * @param  \whatsapi\models\InstancesInstanceKeySendAudioPostRequest $instances_instance_key_send_audio_post_request (required)
     * @param  string $caption Attached caption (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['instancesInstanceKeySendAudioPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function instancesInstanceKeySendAudioPostAsync($instance_key, $to, $instances_instance_key_send_audio_post_request, $caption = null, string $contentType = self::contentTypes['instancesInstanceKeySendAudioPost'][0])
    {
        return $this->instancesInstanceKeySendAudioPostAsyncWithHttpInfo($instance_key, $to, $instances_instance_key_send_audio_post_request, $caption, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation instancesInstanceKeySendAudioPostAsyncWithHttpInfo
     *
     * Send raw audio.
     *
     * @param  string $instance_key Instance key (required)
     * @param  string $to The recipient&#39;s number (required)
     * @param  \whatsapi\models\InstancesInstanceKeySendAudioPostRequest $instances_instance_key_send_audio_post_request (required)
     * @param  string $caption Attached caption (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['instancesInstanceKeySendAudioPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function instancesInstanceKeySendAudioPostAsyncWithHttpInfo($instance_key, $to, $instances_instance_key_send_audio_post_request, $caption = null, string $contentType = self::contentTypes['instancesInstanceKeySendAudioPost'][0])
    {
        $returnType = '\whatsapi\models\MainAPIResponse';
        $request = $this->instancesInstanceKeySendAudioPostRequest($instance_key, $to, $instances_instance_key_send_audio_post_request, $caption, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'instancesInstanceKeySendAudioPost'
     *
     * @param  string $instance_key Instance key (required)
     * @param  string $to The recipient&#39;s number (required)
     * @param  \whatsapi\models\InstancesInstanceKeySendAudioPostRequest $instances_instance_key_send_audio_post_request (required)
     * @param  string $caption Attached caption (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['instancesInstanceKeySendAudioPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function instancesInstanceKeySendAudioPostRequest($instance_key, $to, $instances_instance_key_send_audio_post_request, $caption = null, string $contentType = self::contentTypes['instancesInstanceKeySendAudioPost'][0])
    {

        // verify the required parameter 'instance_key' is set
        if ($instance_key === null || (is_array($instance_key) && count($instance_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $instance_key when calling instancesInstanceKeySendAudioPost'
            );
        }

        // verify the required parameter 'to' is set
        if ($to === null || (is_array($to) && count($to) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $to when calling instancesInstanceKeySendAudioPost'
            );
        }

        // verify the required parameter 'instances_instance_key_send_audio_post_request' is set
        if ($instances_instance_key_send_audio_post_request === null || (is_array($instances_instance_key_send_audio_post_request) && count($instances_instance_key_send_audio_post_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $instances_instance_key_send_audio_post_request when calling instancesInstanceKeySendAudioPost'
            );
        }



        $resourcePath = '/instances/{instance_key}/send/audio';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $to,
            'to', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $caption,
            'caption', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($instance_key !== null) {
            $resourcePath = str_replace(
                '{' . 'instance_key' . '}',
                ObjectSerializer::toPathValue($instance_key),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($instances_instance_key_send_audio_post_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($instances_instance_key_send_audio_post_request));
            } else {
                $httpBody = $instances_instance_key_send_audio_post_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation instancesInstanceKeySendButtonMediaPost
     *
     * Send a button message with a media header.
     *
     * @param  string $instance_key Instance key (required)
     * @param  \whatsapi\models\StructsButtonMessageWithMediaPayload $data Message data (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['instancesInstanceKeySendButtonMediaPost'] to see the possible values for this operation
     *
     * @throws \whatsapi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \whatsapi\models\MainAPIResponse|\whatsapi\models\MainAPIResponse|\whatsapi\models\MainAPIResponse|\whatsapi\models\MainAPIResponse|\whatsapi\models\MainAPIResponse
     */
    public function instancesInstanceKeySendButtonMediaPost($instance_key, $data, string $contentType = self::contentTypes['instancesInstanceKeySendButtonMediaPost'][0])
    {
        list($response) = $this->instancesInstanceKeySendButtonMediaPostWithHttpInfo($instance_key, $data, $contentType);
        return $response;
    }

    /**
     * Operation instancesInstanceKeySendButtonMediaPostWithHttpInfo
     *
     * Send a button message with a media header.
     *
     * @param  string $instance_key Instance key (required)
     * @param  \whatsapi\models\StructsButtonMessageWithMediaPayload $data Message data (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['instancesInstanceKeySendButtonMediaPost'] to see the possible values for this operation
     *
     * @throws \whatsapi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \whatsapi\models\MainAPIResponse|\whatsapi\models\MainAPIResponse|\whatsapi\models\MainAPIResponse|\whatsapi\models\MainAPIResponse|\whatsapi\models\MainAPIResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function instancesInstanceKeySendButtonMediaPostWithHttpInfo($instance_key, $data, string $contentType = self::contentTypes['instancesInstanceKeySendButtonMediaPost'][0])
    {
        $request = $this->instancesInstanceKeySendButtonMediaPostRequest($instance_key, $data, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\whatsapi\models\MainAPIResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\whatsapi\models\MainAPIResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\whatsapi\models\MainAPIResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\whatsapi\models\MainAPIResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\whatsapi\models\MainAPIResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\whatsapi\models\MainAPIResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\whatsapi\models\MainAPIResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\whatsapi\models\MainAPIResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\whatsapi\models\MainAPIResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\whatsapi\models\MainAPIResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\whatsapi\models\MainAPIResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\whatsapi\models\MainAPIResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\whatsapi\models\MainAPIResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\whatsapi\models\MainAPIResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\whatsapi\models\MainAPIResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\whatsapi\models\MainAPIResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\whatsapi\models\MainAPIResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\whatsapi\models\MainAPIResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\whatsapi\models\MainAPIResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\whatsapi\models\MainAPIResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\whatsapi\models\MainAPIResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation instancesInstanceKeySendButtonMediaPostAsync
     *
     * Send a button message with a media header.
     *
     * @param  string $instance_key Instance key (required)
     * @param  \whatsapi\models\StructsButtonMessageWithMediaPayload $data Message data (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['instancesInstanceKeySendButtonMediaPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function instancesInstanceKeySendButtonMediaPostAsync($instance_key, $data, string $contentType = self::contentTypes['instancesInstanceKeySendButtonMediaPost'][0])
    {
        return $this->instancesInstanceKeySendButtonMediaPostAsyncWithHttpInfo($instance_key, $data, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation instancesInstanceKeySendButtonMediaPostAsyncWithHttpInfo
     *
     * Send a button message with a media header.
     *
     * @param  string $instance_key Instance key (required)
     * @param  \whatsapi\models\StructsButtonMessageWithMediaPayload $data Message data (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['instancesInstanceKeySendButtonMediaPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function instancesInstanceKeySendButtonMediaPostAsyncWithHttpInfo($instance_key, $data, string $contentType = self::contentTypes['instancesInstanceKeySendButtonMediaPost'][0])
    {
        $returnType = '\whatsapi\models\MainAPIResponse';
        $request = $this->instancesInstanceKeySendButtonMediaPostRequest($instance_key, $data, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'instancesInstanceKeySendButtonMediaPost'
     *
     * @param  string $instance_key Instance key (required)
     * @param  \whatsapi\models\StructsButtonMessageWithMediaPayload $data Message data (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['instancesInstanceKeySendButtonMediaPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function instancesInstanceKeySendButtonMediaPostRequest($instance_key, $data, string $contentType = self::contentTypes['instancesInstanceKeySendButtonMediaPost'][0])
    {

        // verify the required parameter 'instance_key' is set
        if ($instance_key === null || (is_array($instance_key) && count($instance_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $instance_key when calling instancesInstanceKeySendButtonMediaPost'
            );
        }

        // verify the required parameter 'data' is set
        if ($data === null || (is_array($data) && count($data) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $data when calling instancesInstanceKeySendButtonMediaPost'
            );
        }


        $resourcePath = '/instances/{instance_key}/send/button-media';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($instance_key !== null) {
            $resourcePath = str_replace(
                '{' . 'instance_key' . '}',
                ObjectSerializer::toPathValue($instance_key),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($data)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($data));
            } else {
                $httpBody = $data;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation instancesInstanceKeySendButtonsPost
     *
     * Send a button message.
     *
     * @param  string $instance_key Instance key (required)
     * @param  \whatsapi\models\StructsButtonMessagePayload $data Message data (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['instancesInstanceKeySendButtonsPost'] to see the possible values for this operation
     *
     * @throws \whatsapi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \whatsapi\models\MainAPIResponse|\whatsapi\models\MainAPIResponse|\whatsapi\models\MainAPIResponse|\whatsapi\models\MainAPIResponse|\whatsapi\models\MainAPIResponse
     */
    public function instancesInstanceKeySendButtonsPost($instance_key, $data, string $contentType = self::contentTypes['instancesInstanceKeySendButtonsPost'][0])
    {
        list($response) = $this->instancesInstanceKeySendButtonsPostWithHttpInfo($instance_key, $data, $contentType);
        return $response;
    }

    /**
     * Operation instancesInstanceKeySendButtonsPostWithHttpInfo
     *
     * Send a button message.
     *
     * @param  string $instance_key Instance key (required)
     * @param  \whatsapi\models\StructsButtonMessagePayload $data Message data (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['instancesInstanceKeySendButtonsPost'] to see the possible values for this operation
     *
     * @throws \whatsapi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \whatsapi\models\MainAPIResponse|\whatsapi\models\MainAPIResponse|\whatsapi\models\MainAPIResponse|\whatsapi\models\MainAPIResponse|\whatsapi\models\MainAPIResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function instancesInstanceKeySendButtonsPostWithHttpInfo($instance_key, $data, string $contentType = self::contentTypes['instancesInstanceKeySendButtonsPost'][0])
    {
        $request = $this->instancesInstanceKeySendButtonsPostRequest($instance_key, $data, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\whatsapi\models\MainAPIResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\whatsapi\models\MainAPIResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\whatsapi\models\MainAPIResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\whatsapi\models\MainAPIResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\whatsapi\models\MainAPIResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\whatsapi\models\MainAPIResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\whatsapi\models\MainAPIResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\whatsapi\models\MainAPIResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\whatsapi\models\MainAPIResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\whatsapi\models\MainAPIResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\whatsapi\models\MainAPIResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\whatsapi\models\MainAPIResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\whatsapi\models\MainAPIResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\whatsapi\models\MainAPIResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\whatsapi\models\MainAPIResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\whatsapi\models\MainAPIResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\whatsapi\models\MainAPIResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\whatsapi\models\MainAPIResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\whatsapi\models\MainAPIResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\whatsapi\models\MainAPIResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\whatsapi\models\MainAPIResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation instancesInstanceKeySendButtonsPostAsync
     *
     * Send a button message.
     *
     * @param  string $instance_key Instance key (required)
     * @param  \whatsapi\models\StructsButtonMessagePayload $data Message data (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['instancesInstanceKeySendButtonsPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function instancesInstanceKeySendButtonsPostAsync($instance_key, $data, string $contentType = self::contentTypes['instancesInstanceKeySendButtonsPost'][0])
    {
        return $this->instancesInstanceKeySendButtonsPostAsyncWithHttpInfo($instance_key, $data, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation instancesInstanceKeySendButtonsPostAsyncWithHttpInfo
     *
     * Send a button message.
     *
     * @param  string $instance_key Instance key (required)
     * @param  \whatsapi\models\StructsButtonMessagePayload $data Message data (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['instancesInstanceKeySendButtonsPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function instancesInstanceKeySendButtonsPostAsyncWithHttpInfo($instance_key, $data, string $contentType = self::contentTypes['instancesInstanceKeySendButtonsPost'][0])
    {
        $returnType = '\whatsapi\models\MainAPIResponse';
        $request = $this->instancesInstanceKeySendButtonsPostRequest($instance_key, $data, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'instancesInstanceKeySendButtonsPost'
     *
     * @param  string $instance_key Instance key (required)
     * @param  \whatsapi\models\StructsButtonMessagePayload $data Message data (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['instancesInstanceKeySendButtonsPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function instancesInstanceKeySendButtonsPostRequest($instance_key, $data, string $contentType = self::contentTypes['instancesInstanceKeySendButtonsPost'][0])
    {

        // verify the required parameter 'instance_key' is set
        if ($instance_key === null || (is_array($instance_key) && count($instance_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $instance_key when calling instancesInstanceKeySendButtonsPost'
            );
        }

        // verify the required parameter 'data' is set
        if ($data === null || (is_array($data) && count($data) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $data when calling instancesInstanceKeySendButtonsPost'
            );
        }


        $resourcePath = '/instances/{instance_key}/send/buttons';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($instance_key !== null) {
            $resourcePath = str_replace(
                '{' . 'instance_key' . '}',
                ObjectSerializer::toPathValue($instance_key),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($data)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($data));
            } else {
                $httpBody = $data;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation instancesInstanceKeySendContactPost
     *
     * Send a contact message.
     *
     * @param  string $instance_key Instance key (required)
     * @param  \whatsapi\models\StructsContactMessagePayload $data Message data (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['instancesInstanceKeySendContactPost'] to see the possible values for this operation
     *
     * @throws \whatsapi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \whatsapi\models\MainAPIResponse|\whatsapi\models\MainAPIResponse|\whatsapi\models\MainAPIResponse|\whatsapi\models\MainAPIResponse|\whatsapi\models\MainAPIResponse
     */
    public function instancesInstanceKeySendContactPost($instance_key, $data, string $contentType = self::contentTypes['instancesInstanceKeySendContactPost'][0])
    {
        list($response) = $this->instancesInstanceKeySendContactPostWithHttpInfo($instance_key, $data, $contentType);
        return $response;
    }

    /**
     * Operation instancesInstanceKeySendContactPostWithHttpInfo
     *
     * Send a contact message.
     *
     * @param  string $instance_key Instance key (required)
     * @param  \whatsapi\models\StructsContactMessagePayload $data Message data (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['instancesInstanceKeySendContactPost'] to see the possible values for this operation
     *
     * @throws \whatsapi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \whatsapi\models\MainAPIResponse|\whatsapi\models\MainAPIResponse|\whatsapi\models\MainAPIResponse|\whatsapi\models\MainAPIResponse|\whatsapi\models\MainAPIResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function instancesInstanceKeySendContactPostWithHttpInfo($instance_key, $data, string $contentType = self::contentTypes['instancesInstanceKeySendContactPost'][0])
    {
        $request = $this->instancesInstanceKeySendContactPostRequest($instance_key, $data, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\whatsapi\models\MainAPIResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\whatsapi\models\MainAPIResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\whatsapi\models\MainAPIResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\whatsapi\models\MainAPIResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\whatsapi\models\MainAPIResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\whatsapi\models\MainAPIResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\whatsapi\models\MainAPIResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\whatsapi\models\MainAPIResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\whatsapi\models\MainAPIResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\whatsapi\models\MainAPIResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\whatsapi\models\MainAPIResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\whatsapi\models\MainAPIResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\whatsapi\models\MainAPIResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\whatsapi\models\MainAPIResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\whatsapi\models\MainAPIResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\whatsapi\models\MainAPIResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\whatsapi\models\MainAPIResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\whatsapi\models\MainAPIResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\whatsapi\models\MainAPIResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\whatsapi\models\MainAPIResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\whatsapi\models\MainAPIResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation instancesInstanceKeySendContactPostAsync
     *
     * Send a contact message.
     *
     * @param  string $instance_key Instance key (required)
     * @param  \whatsapi\models\StructsContactMessagePayload $data Message data (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['instancesInstanceKeySendContactPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function instancesInstanceKeySendContactPostAsync($instance_key, $data, string $contentType = self::contentTypes['instancesInstanceKeySendContactPost'][0])
    {
        return $this->instancesInstanceKeySendContactPostAsyncWithHttpInfo($instance_key, $data, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation instancesInstanceKeySendContactPostAsyncWithHttpInfo
     *
     * Send a contact message.
     *
     * @param  string $instance_key Instance key (required)
     * @param  \whatsapi\models\StructsContactMessagePayload $data Message data (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['instancesInstanceKeySendContactPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function instancesInstanceKeySendContactPostAsyncWithHttpInfo($instance_key, $data, string $contentType = self::contentTypes['instancesInstanceKeySendContactPost'][0])
    {
        $returnType = '\whatsapi\models\MainAPIResponse';
        $request = $this->instancesInstanceKeySendContactPostRequest($instance_key, $data, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'instancesInstanceKeySendContactPost'
     *
     * @param  string $instance_key Instance key (required)
     * @param  \whatsapi\models\StructsContactMessagePayload $data Message data (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['instancesInstanceKeySendContactPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function instancesInstanceKeySendContactPostRequest($instance_key, $data, string $contentType = self::contentTypes['instancesInstanceKeySendContactPost'][0])
    {

        // verify the required parameter 'instance_key' is set
        if ($instance_key === null || (is_array($instance_key) && count($instance_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $instance_key when calling instancesInstanceKeySendContactPost'
            );
        }

        // verify the required parameter 'data' is set
        if ($data === null || (is_array($data) && count($data) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $data when calling instancesInstanceKeySendContactPost'
            );
        }


        $resourcePath = '/instances/{instance_key}/send/contact';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($instance_key !== null) {
            $resourcePath = str_replace(
                '{' . 'instance_key' . '}',
                ObjectSerializer::toPathValue($instance_key),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($data)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($data));
            } else {
                $httpBody = $data;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation instancesInstanceKeySendDocumentPost
     *
     * Send raw document.
     *
     * @param  string $instance_key Instance key (required)
     * @param  string $to The recipient&#39;s number (required)
     * @param  \whatsapi\models\InstancesInstanceKeySendDocumentPostRequest $instances_instance_key_send_document_post_request instances_instance_key_send_document_post_request (required)
     * @param  string $caption Attached caption (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['instancesInstanceKeySendDocumentPost'] to see the possible values for this operation
     *
     * @throws \whatsapi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \whatsapi\models\MainAPIResponse|\whatsapi\models\MainAPIResponse|\whatsapi\models\MainAPIResponse|\whatsapi\models\MainAPIResponse|\whatsapi\models\MainAPIResponse
     */
    public function instancesInstanceKeySendDocumentPost($instance_key, $to, $instances_instance_key_send_document_post_request, $caption = null, string $contentType = self::contentTypes['instancesInstanceKeySendDocumentPost'][0])
    {
        list($response) = $this->instancesInstanceKeySendDocumentPostWithHttpInfo($instance_key, $to, $instances_instance_key_send_document_post_request, $caption, $contentType);
        return $response;
    }

    /**
     * Operation instancesInstanceKeySendDocumentPostWithHttpInfo
     *
     * Send raw document.
     *
     * @param  string $instance_key Instance key (required)
     * @param  string $to The recipient&#39;s number (required)
     * @param  \whatsapi\models\InstancesInstanceKeySendDocumentPostRequest $instances_instance_key_send_document_post_request (required)
     * @param  string $caption Attached caption (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['instancesInstanceKeySendDocumentPost'] to see the possible values for this operation
     *
     * @throws \whatsapi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \whatsapi\models\MainAPIResponse|\whatsapi\models\MainAPIResponse|\whatsapi\models\MainAPIResponse|\whatsapi\models\MainAPIResponse|\whatsapi\models\MainAPIResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function instancesInstanceKeySendDocumentPostWithHttpInfo($instance_key, $to, $instances_instance_key_send_document_post_request, $caption = null, string $contentType = self::contentTypes['instancesInstanceKeySendDocumentPost'][0])
    {
        $request = $this->instancesInstanceKeySendDocumentPostRequest($instance_key, $to, $instances_instance_key_send_document_post_request, $caption, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\whatsapi\models\MainAPIResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\whatsapi\models\MainAPIResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\whatsapi\models\MainAPIResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\whatsapi\models\MainAPIResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\whatsapi\models\MainAPIResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\whatsapi\models\MainAPIResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\whatsapi\models\MainAPIResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\whatsapi\models\MainAPIResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\whatsapi\models\MainAPIResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\whatsapi\models\MainAPIResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\whatsapi\models\MainAPIResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\whatsapi\models\MainAPIResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\whatsapi\models\MainAPIResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\whatsapi\models\MainAPIResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\whatsapi\models\MainAPIResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\whatsapi\models\MainAPIResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\whatsapi\models\MainAPIResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\whatsapi\models\MainAPIResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\whatsapi\models\MainAPIResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\whatsapi\models\MainAPIResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\whatsapi\models\MainAPIResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation instancesInstanceKeySendDocumentPostAsync
     *
     * Send raw document.
     *
     * @param  string $instance_key Instance key (required)
     * @param  string $to The recipient&#39;s number (required)
     * @param  \whatsapi\models\InstancesInstanceKeySendDocumentPostRequest $instances_instance_key_send_document_post_request (required)
     * @param  string $caption Attached caption (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['instancesInstanceKeySendDocumentPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function instancesInstanceKeySendDocumentPostAsync($instance_key, $to, $instances_instance_key_send_document_post_request, $caption = null, string $contentType = self::contentTypes['instancesInstanceKeySendDocumentPost'][0])
    {
        return $this->instancesInstanceKeySendDocumentPostAsyncWithHttpInfo($instance_key, $to, $instances_instance_key_send_document_post_request, $caption, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation instancesInstanceKeySendDocumentPostAsyncWithHttpInfo
     *
     * Send raw document.
     *
     * @param  string $instance_key Instance key (required)
     * @param  string $to The recipient&#39;s number (required)
     * @param  \whatsapi\models\InstancesInstanceKeySendDocumentPostRequest $instances_instance_key_send_document_post_request (required)
     * @param  string $caption Attached caption (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['instancesInstanceKeySendDocumentPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function instancesInstanceKeySendDocumentPostAsyncWithHttpInfo($instance_key, $to, $instances_instance_key_send_document_post_request, $caption = null, string $contentType = self::contentTypes['instancesInstanceKeySendDocumentPost'][0])
    {
        $returnType = '\whatsapi\models\MainAPIResponse';
        $request = $this->instancesInstanceKeySendDocumentPostRequest($instance_key, $to, $instances_instance_key_send_document_post_request, $caption, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'instancesInstanceKeySendDocumentPost'
     *
     * @param  string $instance_key Instance key (required)
     * @param  string $to The recipient&#39;s number (required)
     * @param  \whatsapi\models\InstancesInstanceKeySendDocumentPostRequest $instances_instance_key_send_document_post_request (required)
     * @param  string $caption Attached caption (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['instancesInstanceKeySendDocumentPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function instancesInstanceKeySendDocumentPostRequest($instance_key, $to, $instances_instance_key_send_document_post_request, $caption = null, string $contentType = self::contentTypes['instancesInstanceKeySendDocumentPost'][0])
    {

        // verify the required parameter 'instance_key' is set
        if ($instance_key === null || (is_array($instance_key) && count($instance_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $instance_key when calling instancesInstanceKeySendDocumentPost'
            );
        }

        // verify the required parameter 'to' is set
        if ($to === null || (is_array($to) && count($to) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $to when calling instancesInstanceKeySendDocumentPost'
            );
        }

        // verify the required parameter 'instances_instance_key_send_document_post_request' is set
        if ($instances_instance_key_send_document_post_request === null || (is_array($instances_instance_key_send_document_post_request) && count($instances_instance_key_send_document_post_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $instances_instance_key_send_document_post_request when calling instancesInstanceKeySendDocumentPost'
            );
        }



        $resourcePath = '/instances/{instance_key}/send/document';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $to,
            'to', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $caption,
            'caption', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($instance_key !== null) {
            $resourcePath = str_replace(
                '{' . 'instance_key' . '}',
                ObjectSerializer::toPathValue($instance_key),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($instances_instance_key_send_document_post_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($instances_instance_key_send_document_post_request));
            } else {
                $httpBody = $instances_instance_key_send_document_post_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation instancesInstanceKeySendImagePost
     *
     * Send raw image.
     *
     * @param  string $instance_key Instance key (required)
     * @param  string $to The recipient&#39;s number (required)
     * @param  \whatsapi\models\InstancesInstanceKeySendImagePostRequest $instances_instance_key_send_image_post_request instances_instance_key_send_image_post_request (required)
     * @param  string $caption Attached caption (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['instancesInstanceKeySendImagePost'] to see the possible values for this operation
     *
     * @throws \whatsapi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \whatsapi\models\MainAPIResponse|\whatsapi\models\MainAPIResponse|\whatsapi\models\MainAPIResponse|\whatsapi\models\MainAPIResponse|\whatsapi\models\MainAPIResponse
     */
    public function instancesInstanceKeySendImagePost($instance_key, $to, $instances_instance_key_send_image_post_request, $caption = null, string $contentType = self::contentTypes['instancesInstanceKeySendImagePost'][0])
    {
        list($response) = $this->instancesInstanceKeySendImagePostWithHttpInfo($instance_key, $to, $instances_instance_key_send_image_post_request, $caption, $contentType);
        return $response;
    }

    /**
     * Operation instancesInstanceKeySendImagePostWithHttpInfo
     *
     * Send raw image.
     *
     * @param  string $instance_key Instance key (required)
     * @param  string $to The recipient&#39;s number (required)
     * @param  \whatsapi\models\InstancesInstanceKeySendImagePostRequest $instances_instance_key_send_image_post_request (required)
     * @param  string $caption Attached caption (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['instancesInstanceKeySendImagePost'] to see the possible values for this operation
     *
     * @throws \whatsapi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \whatsapi\models\MainAPIResponse|\whatsapi\models\MainAPIResponse|\whatsapi\models\MainAPIResponse|\whatsapi\models\MainAPIResponse|\whatsapi\models\MainAPIResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function instancesInstanceKeySendImagePostWithHttpInfo($instance_key, $to, $instances_instance_key_send_image_post_request, $caption = null, string $contentType = self::contentTypes['instancesInstanceKeySendImagePost'][0])
    {
        $request = $this->instancesInstanceKeySendImagePostRequest($instance_key, $to, $instances_instance_key_send_image_post_request, $caption, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\whatsapi\models\MainAPIResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\whatsapi\models\MainAPIResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\whatsapi\models\MainAPIResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\whatsapi\models\MainAPIResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\whatsapi\models\MainAPIResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\whatsapi\models\MainAPIResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\whatsapi\models\MainAPIResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\whatsapi\models\MainAPIResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\whatsapi\models\MainAPIResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\whatsapi\models\MainAPIResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\whatsapi\models\MainAPIResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\whatsapi\models\MainAPIResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\whatsapi\models\MainAPIResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\whatsapi\models\MainAPIResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\whatsapi\models\MainAPIResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\whatsapi\models\MainAPIResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\whatsapi\models\MainAPIResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\whatsapi\models\MainAPIResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\whatsapi\models\MainAPIResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\whatsapi\models\MainAPIResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\whatsapi\models\MainAPIResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation instancesInstanceKeySendImagePostAsync
     *
     * Send raw image.
     *
     * @param  string $instance_key Instance key (required)
     * @param  string $to The recipient&#39;s number (required)
     * @param  \whatsapi\models\InstancesInstanceKeySendImagePostRequest $instances_instance_key_send_image_post_request (required)
     * @param  string $caption Attached caption (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['instancesInstanceKeySendImagePost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function instancesInstanceKeySendImagePostAsync($instance_key, $to, $instances_instance_key_send_image_post_request, $caption = null, string $contentType = self::contentTypes['instancesInstanceKeySendImagePost'][0])
    {
        return $this->instancesInstanceKeySendImagePostAsyncWithHttpInfo($instance_key, $to, $instances_instance_key_send_image_post_request, $caption, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation instancesInstanceKeySendImagePostAsyncWithHttpInfo
     *
     * Send raw image.
     *
     * @param  string $instance_key Instance key (required)
     * @param  string $to The recipient&#39;s number (required)
     * @param  \whatsapi\models\InstancesInstanceKeySendImagePostRequest $instances_instance_key_send_image_post_request (required)
     * @param  string $caption Attached caption (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['instancesInstanceKeySendImagePost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function instancesInstanceKeySendImagePostAsyncWithHttpInfo($instance_key, $to, $instances_instance_key_send_image_post_request, $caption = null, string $contentType = self::contentTypes['instancesInstanceKeySendImagePost'][0])
    {
        $returnType = '\whatsapi\models\MainAPIResponse';
        $request = $this->instancesInstanceKeySendImagePostRequest($instance_key, $to, $instances_instance_key_send_image_post_request, $caption, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'instancesInstanceKeySendImagePost'
     *
     * @param  string $instance_key Instance key (required)
     * @param  string $to The recipient&#39;s number (required)
     * @param  \whatsapi\models\InstancesInstanceKeySendImagePostRequest $instances_instance_key_send_image_post_request (required)
     * @param  string $caption Attached caption (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['instancesInstanceKeySendImagePost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function instancesInstanceKeySendImagePostRequest($instance_key, $to, $instances_instance_key_send_image_post_request, $caption = null, string $contentType = self::contentTypes['instancesInstanceKeySendImagePost'][0])
    {

        // verify the required parameter 'instance_key' is set
        if ($instance_key === null || (is_array($instance_key) && count($instance_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $instance_key when calling instancesInstanceKeySendImagePost'
            );
        }

        // verify the required parameter 'to' is set
        if ($to === null || (is_array($to) && count($to) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $to when calling instancesInstanceKeySendImagePost'
            );
        }

        // verify the required parameter 'instances_instance_key_send_image_post_request' is set
        if ($instances_instance_key_send_image_post_request === null || (is_array($instances_instance_key_send_image_post_request) && count($instances_instance_key_send_image_post_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $instances_instance_key_send_image_post_request when calling instancesInstanceKeySendImagePost'
            );
        }



        $resourcePath = '/instances/{instance_key}/send/image';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $to,
            'to', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $caption,
            'caption', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($instance_key !== null) {
            $resourcePath = str_replace(
                '{' . 'instance_key' . '}',
                ObjectSerializer::toPathValue($instance_key),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($instances_instance_key_send_image_post_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($instances_instance_key_send_image_post_request));
            } else {
                $httpBody = $instances_instance_key_send_image_post_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation instancesInstanceKeySendListPost
     *
     * Send a List message.
     *
     * @param  string $instance_key Instance key (required)
     * @param  \whatsapi\models\StructsListMessagePayload $data Message data (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['instancesInstanceKeySendListPost'] to see the possible values for this operation
     *
     * @throws \whatsapi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \whatsapi\models\MainAPIResponse|\whatsapi\models\MainAPIResponse|\whatsapi\models\MainAPIResponse|\whatsapi\models\MainAPIResponse|\whatsapi\models\MainAPIResponse
     */
    public function instancesInstanceKeySendListPost($instance_key, $data, string $contentType = self::contentTypes['instancesInstanceKeySendListPost'][0])
    {
        list($response) = $this->instancesInstanceKeySendListPostWithHttpInfo($instance_key, $data, $contentType);
        return $response;
    }

    /**
     * Operation instancesInstanceKeySendListPostWithHttpInfo
     *
     * Send a List message.
     *
     * @param  string $instance_key Instance key (required)
     * @param  \whatsapi\models\StructsListMessagePayload $data Message data (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['instancesInstanceKeySendListPost'] to see the possible values for this operation
     *
     * @throws \whatsapi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \whatsapi\models\MainAPIResponse|\whatsapi\models\MainAPIResponse|\whatsapi\models\MainAPIResponse|\whatsapi\models\MainAPIResponse|\whatsapi\models\MainAPIResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function instancesInstanceKeySendListPostWithHttpInfo($instance_key, $data, string $contentType = self::contentTypes['instancesInstanceKeySendListPost'][0])
    {
        $request = $this->instancesInstanceKeySendListPostRequest($instance_key, $data, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\whatsapi\models\MainAPIResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\whatsapi\models\MainAPIResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\whatsapi\models\MainAPIResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\whatsapi\models\MainAPIResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\whatsapi\models\MainAPIResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\whatsapi\models\MainAPIResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\whatsapi\models\MainAPIResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\whatsapi\models\MainAPIResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\whatsapi\models\MainAPIResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\whatsapi\models\MainAPIResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\whatsapi\models\MainAPIResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\whatsapi\models\MainAPIResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\whatsapi\models\MainAPIResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\whatsapi\models\MainAPIResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\whatsapi\models\MainAPIResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\whatsapi\models\MainAPIResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\whatsapi\models\MainAPIResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\whatsapi\models\MainAPIResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\whatsapi\models\MainAPIResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\whatsapi\models\MainAPIResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\whatsapi\models\MainAPIResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation instancesInstanceKeySendListPostAsync
     *
     * Send a List message.
     *
     * @param  string $instance_key Instance key (required)
     * @param  \whatsapi\models\StructsListMessagePayload $data Message data (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['instancesInstanceKeySendListPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function instancesInstanceKeySendListPostAsync($instance_key, $data, string $contentType = self::contentTypes['instancesInstanceKeySendListPost'][0])
    {
        return $this->instancesInstanceKeySendListPostAsyncWithHttpInfo($instance_key, $data, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation instancesInstanceKeySendListPostAsyncWithHttpInfo
     *
     * Send a List message.
     *
     * @param  string $instance_key Instance key (required)
     * @param  \whatsapi\models\StructsListMessagePayload $data Message data (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['instancesInstanceKeySendListPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function instancesInstanceKeySendListPostAsyncWithHttpInfo($instance_key, $data, string $contentType = self::contentTypes['instancesInstanceKeySendListPost'][0])
    {
        $returnType = '\whatsapi\models\MainAPIResponse';
        $request = $this->instancesInstanceKeySendListPostRequest($instance_key, $data, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'instancesInstanceKeySendListPost'
     *
     * @param  string $instance_key Instance key (required)
     * @param  \whatsapi\models\StructsListMessagePayload $data Message data (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['instancesInstanceKeySendListPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function instancesInstanceKeySendListPostRequest($instance_key, $data, string $contentType = self::contentTypes['instancesInstanceKeySendListPost'][0])
    {

        // verify the required parameter 'instance_key' is set
        if ($instance_key === null || (is_array($instance_key) && count($instance_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $instance_key when calling instancesInstanceKeySendListPost'
            );
        }

        // verify the required parameter 'data' is set
        if ($data === null || (is_array($data) && count($data) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $data when calling instancesInstanceKeySendListPost'
            );
        }


        $resourcePath = '/instances/{instance_key}/send/list';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($instance_key !== null) {
            $resourcePath = str_replace(
                '{' . 'instance_key' . '}',
                ObjectSerializer::toPathValue($instance_key),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($data)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($data));
            } else {
                $httpBody = $data;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation instancesInstanceKeySendLocationPost
     *
     * Send a location message.
     *
     * @param  string $instance_key Instance key (required)
     * @param  \whatsapi\models\StructsLocationMessagePayload $data Message data (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['instancesInstanceKeySendLocationPost'] to see the possible values for this operation
     *
     * @throws \whatsapi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \whatsapi\models\MainAPIResponse|\whatsapi\models\MainAPIResponse|\whatsapi\models\MainAPIResponse|\whatsapi\models\MainAPIResponse|\whatsapi\models\MainAPIResponse
     */
    public function instancesInstanceKeySendLocationPost($instance_key, $data, string $contentType = self::contentTypes['instancesInstanceKeySendLocationPost'][0])
    {
        list($response) = $this->instancesInstanceKeySendLocationPostWithHttpInfo($instance_key, $data, $contentType);
        return $response;
    }

    /**
     * Operation instancesInstanceKeySendLocationPostWithHttpInfo
     *
     * Send a location message.
     *
     * @param  string $instance_key Instance key (required)
     * @param  \whatsapi\models\StructsLocationMessagePayload $data Message data (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['instancesInstanceKeySendLocationPost'] to see the possible values for this operation
     *
     * @throws \whatsapi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \whatsapi\models\MainAPIResponse|\whatsapi\models\MainAPIResponse|\whatsapi\models\MainAPIResponse|\whatsapi\models\MainAPIResponse|\whatsapi\models\MainAPIResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function instancesInstanceKeySendLocationPostWithHttpInfo($instance_key, $data, string $contentType = self::contentTypes['instancesInstanceKeySendLocationPost'][0])
    {
        $request = $this->instancesInstanceKeySendLocationPostRequest($instance_key, $data, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\whatsapi\models\MainAPIResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\whatsapi\models\MainAPIResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\whatsapi\models\MainAPIResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\whatsapi\models\MainAPIResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\whatsapi\models\MainAPIResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\whatsapi\models\MainAPIResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\whatsapi\models\MainAPIResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\whatsapi\models\MainAPIResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\whatsapi\models\MainAPIResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\whatsapi\models\MainAPIResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\whatsapi\models\MainAPIResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\whatsapi\models\MainAPIResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\whatsapi\models\MainAPIResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\whatsapi\models\MainAPIResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\whatsapi\models\MainAPIResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\whatsapi\models\MainAPIResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\whatsapi\models\MainAPIResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\whatsapi\models\MainAPIResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\whatsapi\models\MainAPIResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\whatsapi\models\MainAPIResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\whatsapi\models\MainAPIResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation instancesInstanceKeySendLocationPostAsync
     *
     * Send a location message.
     *
     * @param  string $instance_key Instance key (required)
     * @param  \whatsapi\models\StructsLocationMessagePayload $data Message data (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['instancesInstanceKeySendLocationPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function instancesInstanceKeySendLocationPostAsync($instance_key, $data, string $contentType = self::contentTypes['instancesInstanceKeySendLocationPost'][0])
    {
        return $this->instancesInstanceKeySendLocationPostAsyncWithHttpInfo($instance_key, $data, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation instancesInstanceKeySendLocationPostAsyncWithHttpInfo
     *
     * Send a location message.
     *
     * @param  string $instance_key Instance key (required)
     * @param  \whatsapi\models\StructsLocationMessagePayload $data Message data (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['instancesInstanceKeySendLocationPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function instancesInstanceKeySendLocationPostAsyncWithHttpInfo($instance_key, $data, string $contentType = self::contentTypes['instancesInstanceKeySendLocationPost'][0])
    {
        $returnType = '\whatsapi\models\MainAPIResponse';
        $request = $this->instancesInstanceKeySendLocationPostRequest($instance_key, $data, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'instancesInstanceKeySendLocationPost'
     *
     * @param  string $instance_key Instance key (required)
     * @param  \whatsapi\models\StructsLocationMessagePayload $data Message data (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['instancesInstanceKeySendLocationPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function instancesInstanceKeySendLocationPostRequest($instance_key, $data, string $contentType = self::contentTypes['instancesInstanceKeySendLocationPost'][0])
    {

        // verify the required parameter 'instance_key' is set
        if ($instance_key === null || (is_array($instance_key) && count($instance_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $instance_key when calling instancesInstanceKeySendLocationPost'
            );
        }

        // verify the required parameter 'data' is set
        if ($data === null || (is_array($data) && count($data) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $data when calling instancesInstanceKeySendLocationPost'
            );
        }


        $resourcePath = '/instances/{instance_key}/send/location';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($instance_key !== null) {
            $resourcePath = str_replace(
                '{' . 'instance_key' . '}',
                ObjectSerializer::toPathValue($instance_key),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($data)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($data));
            } else {
                $httpBody = $data;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation instancesInstanceKeySendMediaPost
     *
     * Send a media message.
     *
     * @param  string $instance_key Instance key (required)
     * @param  \whatsapi\models\StructsSendMediaPayload $data Message data (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['instancesInstanceKeySendMediaPost'] to see the possible values for this operation
     *
     * @throws \whatsapi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \whatsapi\models\MainAPIResponse|\whatsapi\models\MainAPIResponse|\whatsapi\models\MainAPIResponse|\whatsapi\models\MainAPIResponse|\whatsapi\models\MainAPIResponse
     */
    public function instancesInstanceKeySendMediaPost($instance_key, $data, string $contentType = self::contentTypes['instancesInstanceKeySendMediaPost'][0])
    {
        list($response) = $this->instancesInstanceKeySendMediaPostWithHttpInfo($instance_key, $data, $contentType);
        return $response;
    }

    /**
     * Operation instancesInstanceKeySendMediaPostWithHttpInfo
     *
     * Send a media message.
     *
     * @param  string $instance_key Instance key (required)
     * @param  \whatsapi\models\StructsSendMediaPayload $data Message data (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['instancesInstanceKeySendMediaPost'] to see the possible values for this operation
     *
     * @throws \whatsapi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \whatsapi\models\MainAPIResponse|\whatsapi\models\MainAPIResponse|\whatsapi\models\MainAPIResponse|\whatsapi\models\MainAPIResponse|\whatsapi\models\MainAPIResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function instancesInstanceKeySendMediaPostWithHttpInfo($instance_key, $data, string $contentType = self::contentTypes['instancesInstanceKeySendMediaPost'][0])
    {
        $request = $this->instancesInstanceKeySendMediaPostRequest($instance_key, $data, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\whatsapi\models\MainAPIResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\whatsapi\models\MainAPIResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\whatsapi\models\MainAPIResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\whatsapi\models\MainAPIResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\whatsapi\models\MainAPIResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\whatsapi\models\MainAPIResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\whatsapi\models\MainAPIResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\whatsapi\models\MainAPIResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\whatsapi\models\MainAPIResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\whatsapi\models\MainAPIResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\whatsapi\models\MainAPIResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\whatsapi\models\MainAPIResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\whatsapi\models\MainAPIResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\whatsapi\models\MainAPIResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\whatsapi\models\MainAPIResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\whatsapi\models\MainAPIResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\whatsapi\models\MainAPIResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\whatsapi\models\MainAPIResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\whatsapi\models\MainAPIResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\whatsapi\models\MainAPIResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\whatsapi\models\MainAPIResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation instancesInstanceKeySendMediaPostAsync
     *
     * Send a media message.
     *
     * @param  string $instance_key Instance key (required)
     * @param  \whatsapi\models\StructsSendMediaPayload $data Message data (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['instancesInstanceKeySendMediaPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function instancesInstanceKeySendMediaPostAsync($instance_key, $data, string $contentType = self::contentTypes['instancesInstanceKeySendMediaPost'][0])
    {
        return $this->instancesInstanceKeySendMediaPostAsyncWithHttpInfo($instance_key, $data, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation instancesInstanceKeySendMediaPostAsyncWithHttpInfo
     *
     * Send a media message.
     *
     * @param  string $instance_key Instance key (required)
     * @param  \whatsapi\models\StructsSendMediaPayload $data Message data (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['instancesInstanceKeySendMediaPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function instancesInstanceKeySendMediaPostAsyncWithHttpInfo($instance_key, $data, string $contentType = self::contentTypes['instancesInstanceKeySendMediaPost'][0])
    {
        $returnType = '\whatsapi\models\MainAPIResponse';
        $request = $this->instancesInstanceKeySendMediaPostRequest($instance_key, $data, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'instancesInstanceKeySendMediaPost'
     *
     * @param  string $instance_key Instance key (required)
     * @param  \whatsapi\models\StructsSendMediaPayload $data Message data (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['instancesInstanceKeySendMediaPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function instancesInstanceKeySendMediaPostRequest($instance_key, $data, string $contentType = self::contentTypes['instancesInstanceKeySendMediaPost'][0])
    {

        // verify the required parameter 'instance_key' is set
        if ($instance_key === null || (is_array($instance_key) && count($instance_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $instance_key when calling instancesInstanceKeySendMediaPost'
            );
        }

        // verify the required parameter 'data' is set
        if ($data === null || (is_array($data) && count($data) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $data when calling instancesInstanceKeySendMediaPost'
            );
        }


        $resourcePath = '/instances/{instance_key}/send/media';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($instance_key !== null) {
            $resourcePath = str_replace(
                '{' . 'instance_key' . '}',
                ObjectSerializer::toPathValue($instance_key),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($data)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($data));
            } else {
                $httpBody = $data;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation instancesInstanceKeySendPollPost
     *
     * Send a Poll message with media.
     *
     * @param  string $instance_key Instance key (required)
     * @param  \whatsapi\models\StructsPollMessagePayload $data Message data (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['instancesInstanceKeySendPollPost'] to see the possible values for this operation
     *
     * @throws \whatsapi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \whatsapi\models\MainAPIResponse|\whatsapi\models\MainAPIResponse|\whatsapi\models\MainAPIResponse|\whatsapi\models\MainAPIResponse|\whatsapi\models\MainAPIResponse
     */
    public function instancesInstanceKeySendPollPost($instance_key, $data, string $contentType = self::contentTypes['instancesInstanceKeySendPollPost'][0])
    {
        list($response) = $this->instancesInstanceKeySendPollPostWithHttpInfo($instance_key, $data, $contentType);
        return $response;
    }

    /**
     * Operation instancesInstanceKeySendPollPostWithHttpInfo
     *
     * Send a Poll message with media.
     *
     * @param  string $instance_key Instance key (required)
     * @param  \whatsapi\models\StructsPollMessagePayload $data Message data (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['instancesInstanceKeySendPollPost'] to see the possible values for this operation
     *
     * @throws \whatsapi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \whatsapi\models\MainAPIResponse|\whatsapi\models\MainAPIResponse|\whatsapi\models\MainAPIResponse|\whatsapi\models\MainAPIResponse|\whatsapi\models\MainAPIResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function instancesInstanceKeySendPollPostWithHttpInfo($instance_key, $data, string $contentType = self::contentTypes['instancesInstanceKeySendPollPost'][0])
    {
        $request = $this->instancesInstanceKeySendPollPostRequest($instance_key, $data, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\whatsapi\models\MainAPIResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\whatsapi\models\MainAPIResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\whatsapi\models\MainAPIResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\whatsapi\models\MainAPIResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\whatsapi\models\MainAPIResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\whatsapi\models\MainAPIResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\whatsapi\models\MainAPIResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\whatsapi\models\MainAPIResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\whatsapi\models\MainAPIResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\whatsapi\models\MainAPIResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\whatsapi\models\MainAPIResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\whatsapi\models\MainAPIResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\whatsapi\models\MainAPIResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\whatsapi\models\MainAPIResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\whatsapi\models\MainAPIResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\whatsapi\models\MainAPIResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\whatsapi\models\MainAPIResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\whatsapi\models\MainAPIResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\whatsapi\models\MainAPIResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\whatsapi\models\MainAPIResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\whatsapi\models\MainAPIResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation instancesInstanceKeySendPollPostAsync
     *
     * Send a Poll message with media.
     *
     * @param  string $instance_key Instance key (required)
     * @param  \whatsapi\models\StructsPollMessagePayload $data Message data (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['instancesInstanceKeySendPollPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function instancesInstanceKeySendPollPostAsync($instance_key, $data, string $contentType = self::contentTypes['instancesInstanceKeySendPollPost'][0])
    {
        return $this->instancesInstanceKeySendPollPostAsyncWithHttpInfo($instance_key, $data, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation instancesInstanceKeySendPollPostAsyncWithHttpInfo
     *
     * Send a Poll message with media.
     *
     * @param  string $instance_key Instance key (required)
     * @param  \whatsapi\models\StructsPollMessagePayload $data Message data (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['instancesInstanceKeySendPollPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function instancesInstanceKeySendPollPostAsyncWithHttpInfo($instance_key, $data, string $contentType = self::contentTypes['instancesInstanceKeySendPollPost'][0])
    {
        $returnType = '\whatsapi\models\MainAPIResponse';
        $request = $this->instancesInstanceKeySendPollPostRequest($instance_key, $data, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'instancesInstanceKeySendPollPost'
     *
     * @param  string $instance_key Instance key (required)
     * @param  \whatsapi\models\StructsPollMessagePayload $data Message data (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['instancesInstanceKeySendPollPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function instancesInstanceKeySendPollPostRequest($instance_key, $data, string $contentType = self::contentTypes['instancesInstanceKeySendPollPost'][0])
    {

        // verify the required parameter 'instance_key' is set
        if ($instance_key === null || (is_array($instance_key) && count($instance_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $instance_key when calling instancesInstanceKeySendPollPost'
            );
        }

        // verify the required parameter 'data' is set
        if ($data === null || (is_array($data) && count($data) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $data when calling instancesInstanceKeySendPollPost'
            );
        }


        $resourcePath = '/instances/{instance_key}/send/poll';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($instance_key !== null) {
            $resourcePath = str_replace(
                '{' . 'instance_key' . '}',
                ObjectSerializer::toPathValue($instance_key),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($data)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($data));
            } else {
                $httpBody = $data;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation instancesInstanceKeySendTemplateMediaPost
     *
     * Send a template message with media.
     *
     * @param  string $instance_key Instance key (required)
     * @param  \whatsapi\models\StructsTemplateButtonWithMediaPayload $data Message data (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['instancesInstanceKeySendTemplateMediaPost'] to see the possible values for this operation
     *
     * @throws \whatsapi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \whatsapi\models\MainAPIResponse|\whatsapi\models\MainAPIResponse|\whatsapi\models\MainAPIResponse|\whatsapi\models\MainAPIResponse|\whatsapi\models\MainAPIResponse
     */
    public function instancesInstanceKeySendTemplateMediaPost($instance_key, $data, string $contentType = self::contentTypes['instancesInstanceKeySendTemplateMediaPost'][0])
    {
        list($response) = $this->instancesInstanceKeySendTemplateMediaPostWithHttpInfo($instance_key, $data, $contentType);
        return $response;
    }

    /**
     * Operation instancesInstanceKeySendTemplateMediaPostWithHttpInfo
     *
     * Send a template message with media.
     *
     * @param  string $instance_key Instance key (required)
     * @param  \whatsapi\models\StructsTemplateButtonWithMediaPayload $data Message data (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['instancesInstanceKeySendTemplateMediaPost'] to see the possible values for this operation
     *
     * @throws \whatsapi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \whatsapi\models\MainAPIResponse|\whatsapi\models\MainAPIResponse|\whatsapi\models\MainAPIResponse|\whatsapi\models\MainAPIResponse|\whatsapi\models\MainAPIResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function instancesInstanceKeySendTemplateMediaPostWithHttpInfo($instance_key, $data, string $contentType = self::contentTypes['instancesInstanceKeySendTemplateMediaPost'][0])
    {
        $request = $this->instancesInstanceKeySendTemplateMediaPostRequest($instance_key, $data, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\whatsapi\models\MainAPIResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\whatsapi\models\MainAPIResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\whatsapi\models\MainAPIResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\whatsapi\models\MainAPIResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\whatsapi\models\MainAPIResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\whatsapi\models\MainAPIResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\whatsapi\models\MainAPIResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\whatsapi\models\MainAPIResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\whatsapi\models\MainAPIResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\whatsapi\models\MainAPIResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\whatsapi\models\MainAPIResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\whatsapi\models\MainAPIResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\whatsapi\models\MainAPIResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\whatsapi\models\MainAPIResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\whatsapi\models\MainAPIResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\whatsapi\models\MainAPIResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\whatsapi\models\MainAPIResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\whatsapi\models\MainAPIResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\whatsapi\models\MainAPIResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\whatsapi\models\MainAPIResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\whatsapi\models\MainAPIResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation instancesInstanceKeySendTemplateMediaPostAsync
     *
     * Send a template message with media.
     *
     * @param  string $instance_key Instance key (required)
     * @param  \whatsapi\models\StructsTemplateButtonWithMediaPayload $data Message data (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['instancesInstanceKeySendTemplateMediaPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function instancesInstanceKeySendTemplateMediaPostAsync($instance_key, $data, string $contentType = self::contentTypes['instancesInstanceKeySendTemplateMediaPost'][0])
    {
        return $this->instancesInstanceKeySendTemplateMediaPostAsyncWithHttpInfo($instance_key, $data, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation instancesInstanceKeySendTemplateMediaPostAsyncWithHttpInfo
     *
     * Send a template message with media.
     *
     * @param  string $instance_key Instance key (required)
     * @param  \whatsapi\models\StructsTemplateButtonWithMediaPayload $data Message data (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['instancesInstanceKeySendTemplateMediaPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function instancesInstanceKeySendTemplateMediaPostAsyncWithHttpInfo($instance_key, $data, string $contentType = self::contentTypes['instancesInstanceKeySendTemplateMediaPost'][0])
    {
        $returnType = '\whatsapi\models\MainAPIResponse';
        $request = $this->instancesInstanceKeySendTemplateMediaPostRequest($instance_key, $data, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'instancesInstanceKeySendTemplateMediaPost'
     *
     * @param  string $instance_key Instance key (required)
     * @param  \whatsapi\models\StructsTemplateButtonWithMediaPayload $data Message data (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['instancesInstanceKeySendTemplateMediaPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function instancesInstanceKeySendTemplateMediaPostRequest($instance_key, $data, string $contentType = self::contentTypes['instancesInstanceKeySendTemplateMediaPost'][0])
    {

        // verify the required parameter 'instance_key' is set
        if ($instance_key === null || (is_array($instance_key) && count($instance_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $instance_key when calling instancesInstanceKeySendTemplateMediaPost'
            );
        }

        // verify the required parameter 'data' is set
        if ($data === null || (is_array($data) && count($data) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $data when calling instancesInstanceKeySendTemplateMediaPost'
            );
        }


        $resourcePath = '/instances/{instance_key}/send/template-media';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($instance_key !== null) {
            $resourcePath = str_replace(
                '{' . 'instance_key' . '}',
                ObjectSerializer::toPathValue($instance_key),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($data)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($data));
            } else {
                $httpBody = $data;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation instancesInstanceKeySendTemplatePost
     *
     * Send a template message.
     *
     * @param  string $instance_key Instance key (required)
     * @param  \whatsapi\models\StructsTemplateButtonPayload $data Message data (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['instancesInstanceKeySendTemplatePost'] to see the possible values for this operation
     *
     * @throws \whatsapi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \whatsapi\models\MainAPIResponse|\whatsapi\models\MainAPIResponse|\whatsapi\models\MainAPIResponse|\whatsapi\models\MainAPIResponse|\whatsapi\models\MainAPIResponse
     */
    public function instancesInstanceKeySendTemplatePost($instance_key, $data, string $contentType = self::contentTypes['instancesInstanceKeySendTemplatePost'][0])
    {
        list($response) = $this->instancesInstanceKeySendTemplatePostWithHttpInfo($instance_key, $data, $contentType);
        return $response;
    }

    /**
     * Operation instancesInstanceKeySendTemplatePostWithHttpInfo
     *
     * Send a template message.
     *
     * @param  string $instance_key Instance key (required)
     * @param  \whatsapi\models\StructsTemplateButtonPayload $data Message data (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['instancesInstanceKeySendTemplatePost'] to see the possible values for this operation
     *
     * @throws \whatsapi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \whatsapi\models\MainAPIResponse|\whatsapi\models\MainAPIResponse|\whatsapi\models\MainAPIResponse|\whatsapi\models\MainAPIResponse|\whatsapi\models\MainAPIResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function instancesInstanceKeySendTemplatePostWithHttpInfo($instance_key, $data, string $contentType = self::contentTypes['instancesInstanceKeySendTemplatePost'][0])
    {
        $request = $this->instancesInstanceKeySendTemplatePostRequest($instance_key, $data, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\whatsapi\models\MainAPIResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\whatsapi\models\MainAPIResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\whatsapi\models\MainAPIResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\whatsapi\models\MainAPIResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\whatsapi\models\MainAPIResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\whatsapi\models\MainAPIResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\whatsapi\models\MainAPIResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\whatsapi\models\MainAPIResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\whatsapi\models\MainAPIResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\whatsapi\models\MainAPIResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\whatsapi\models\MainAPIResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\whatsapi\models\MainAPIResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\whatsapi\models\MainAPIResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\whatsapi\models\MainAPIResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\whatsapi\models\MainAPIResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\whatsapi\models\MainAPIResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\whatsapi\models\MainAPIResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\whatsapi\models\MainAPIResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\whatsapi\models\MainAPIResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\whatsapi\models\MainAPIResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\whatsapi\models\MainAPIResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation instancesInstanceKeySendTemplatePostAsync
     *
     * Send a template message.
     *
     * @param  string $instance_key Instance key (required)
     * @param  \whatsapi\models\StructsTemplateButtonPayload $data Message data (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['instancesInstanceKeySendTemplatePost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function instancesInstanceKeySendTemplatePostAsync($instance_key, $data, string $contentType = self::contentTypes['instancesInstanceKeySendTemplatePost'][0])
    {
        return $this->instancesInstanceKeySendTemplatePostAsyncWithHttpInfo($instance_key, $data, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation instancesInstanceKeySendTemplatePostAsyncWithHttpInfo
     *
     * Send a template message.
     *
     * @param  string $instance_key Instance key (required)
     * @param  \whatsapi\models\StructsTemplateButtonPayload $data Message data (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['instancesInstanceKeySendTemplatePost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function instancesInstanceKeySendTemplatePostAsyncWithHttpInfo($instance_key, $data, string $contentType = self::contentTypes['instancesInstanceKeySendTemplatePost'][0])
    {
        $returnType = '\whatsapi\models\MainAPIResponse';
        $request = $this->instancesInstanceKeySendTemplatePostRequest($instance_key, $data, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'instancesInstanceKeySendTemplatePost'
     *
     * @param  string $instance_key Instance key (required)
     * @param  \whatsapi\models\StructsTemplateButtonPayload $data Message data (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['instancesInstanceKeySendTemplatePost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function instancesInstanceKeySendTemplatePostRequest($instance_key, $data, string $contentType = self::contentTypes['instancesInstanceKeySendTemplatePost'][0])
    {

        // verify the required parameter 'instance_key' is set
        if ($instance_key === null || (is_array($instance_key) && count($instance_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $instance_key when calling instancesInstanceKeySendTemplatePost'
            );
        }

        // verify the required parameter 'data' is set
        if ($data === null || (is_array($data) && count($data) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $data when calling instancesInstanceKeySendTemplatePost'
            );
        }


        $resourcePath = '/instances/{instance_key}/send/template';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($instance_key !== null) {
            $resourcePath = str_replace(
                '{' . 'instance_key' . '}',
                ObjectSerializer::toPathValue($instance_key),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($data)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($data));
            } else {
                $httpBody = $data;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation instancesInstanceKeySendTextPost
     *
     * Send a text message.
     *
     * @param  string $instance_key Instance key (required)
     * @param  \whatsapi\models\StructsTextMessage $data Message data (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['instancesInstanceKeySendTextPost'] to see the possible values for this operation
     *
     * @throws \whatsapi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \whatsapi\models\MainAPIResponse|\whatsapi\models\MainAPIResponse|\whatsapi\models\MainAPIResponse|\whatsapi\models\MainAPIResponse|\whatsapi\models\MainAPIResponse
     */
    public function instancesInstanceKeySendTextPost($instance_key, $data, string $contentType = self::contentTypes['instancesInstanceKeySendTextPost'][0])
    {
        list($response) = $this->instancesInstanceKeySendTextPostWithHttpInfo($instance_key, $data, $contentType);
        return $response;
    }

    /**
     * Operation instancesInstanceKeySendTextPostWithHttpInfo
     *
     * Send a text message.
     *
     * @param  string $instance_key Instance key (required)
     * @param  \whatsapi\models\StructsTextMessage $data Message data (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['instancesInstanceKeySendTextPost'] to see the possible values for this operation
     *
     * @throws \whatsapi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \whatsapi\models\MainAPIResponse|\whatsapi\models\MainAPIResponse|\whatsapi\models\MainAPIResponse|\whatsapi\models\MainAPIResponse|\whatsapi\models\MainAPIResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function instancesInstanceKeySendTextPostWithHttpInfo($instance_key, $data, string $contentType = self::contentTypes['instancesInstanceKeySendTextPost'][0])
    {
        $request = $this->instancesInstanceKeySendTextPostRequest($instance_key, $data, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\whatsapi\models\MainAPIResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\whatsapi\models\MainAPIResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\whatsapi\models\MainAPIResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\whatsapi\models\MainAPIResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\whatsapi\models\MainAPIResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\whatsapi\models\MainAPIResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\whatsapi\models\MainAPIResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\whatsapi\models\MainAPIResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\whatsapi\models\MainAPIResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\whatsapi\models\MainAPIResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\whatsapi\models\MainAPIResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\whatsapi\models\MainAPIResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\whatsapi\models\MainAPIResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\whatsapi\models\MainAPIResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\whatsapi\models\MainAPIResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\whatsapi\models\MainAPIResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\whatsapi\models\MainAPIResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\whatsapi\models\MainAPIResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\whatsapi\models\MainAPIResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\whatsapi\models\MainAPIResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\whatsapi\models\MainAPIResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation instancesInstanceKeySendTextPostAsync
     *
     * Send a text message.
     *
     * @param  string $instance_key Instance key (required)
     * @param  \whatsapi\models\StructsTextMessage $data Message data (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['instancesInstanceKeySendTextPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function instancesInstanceKeySendTextPostAsync($instance_key, $data, string $contentType = self::contentTypes['instancesInstanceKeySendTextPost'][0])
    {
        return $this->instancesInstanceKeySendTextPostAsyncWithHttpInfo($instance_key, $data, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation instancesInstanceKeySendTextPostAsyncWithHttpInfo
     *
     * Send a text message.
     *
     * @param  string $instance_key Instance key (required)
     * @param  \whatsapi\models\StructsTextMessage $data Message data (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['instancesInstanceKeySendTextPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function instancesInstanceKeySendTextPostAsyncWithHttpInfo($instance_key, $data, string $contentType = self::contentTypes['instancesInstanceKeySendTextPost'][0])
    {
        $returnType = '\whatsapi\models\MainAPIResponse';
        $request = $this->instancesInstanceKeySendTextPostRequest($instance_key, $data, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'instancesInstanceKeySendTextPost'
     *
     * @param  string $instance_key Instance key (required)
     * @param  \whatsapi\models\StructsTextMessage $data Message data (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['instancesInstanceKeySendTextPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function instancesInstanceKeySendTextPostRequest($instance_key, $data, string $contentType = self::contentTypes['instancesInstanceKeySendTextPost'][0])
    {

        // verify the required parameter 'instance_key' is set
        if ($instance_key === null || (is_array($instance_key) && count($instance_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $instance_key when calling instancesInstanceKeySendTextPost'
            );
        }

        // verify the required parameter 'data' is set
        if ($data === null || (is_array($data) && count($data) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $data when calling instancesInstanceKeySendTextPost'
            );
        }


        $resourcePath = '/instances/{instance_key}/send/text';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($instance_key !== null) {
            $resourcePath = str_replace(
                '{' . 'instance_key' . '}',
                ObjectSerializer::toPathValue($instance_key),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($data)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($data));
            } else {
                $httpBody = $data;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation instancesInstanceKeySendUploadPost
     *
     * Upload media.
     *
     * @param  string $instance_key Instance key (required)
     * @param  string $type Media type (required)
     * @param  \whatsapi\models\InstancesInstanceKeySendUploadPostRequest $instances_instance_key_send_upload_post_request instances_instance_key_send_upload_post_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['instancesInstanceKeySendUploadPost'] to see the possible values for this operation
     *
     * @throws \whatsapi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \whatsapi\models\MainAPIResponse|\whatsapi\models\MainAPIResponse|\whatsapi\models\MainAPIResponse|\whatsapi\models\MainAPIResponse|\whatsapi\models\MainAPIResponse
     */
    public function instancesInstanceKeySendUploadPost($instance_key, $type, $instances_instance_key_send_upload_post_request, string $contentType = self::contentTypes['instancesInstanceKeySendUploadPost'][0])
    {
        list($response) = $this->instancesInstanceKeySendUploadPostWithHttpInfo($instance_key, $type, $instances_instance_key_send_upload_post_request, $contentType);
        return $response;
    }

    /**
     * Operation instancesInstanceKeySendUploadPostWithHttpInfo
     *
     * Upload media.
     *
     * @param  string $instance_key Instance key (required)
     * @param  string $type Media type (required)
     * @param  \whatsapi\models\InstancesInstanceKeySendUploadPostRequest $instances_instance_key_send_upload_post_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['instancesInstanceKeySendUploadPost'] to see the possible values for this operation
     *
     * @throws \whatsapi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \whatsapi\models\MainAPIResponse|\whatsapi\models\MainAPIResponse|\whatsapi\models\MainAPIResponse|\whatsapi\models\MainAPIResponse|\whatsapi\models\MainAPIResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function instancesInstanceKeySendUploadPostWithHttpInfo($instance_key, $type, $instances_instance_key_send_upload_post_request, string $contentType = self::contentTypes['instancesInstanceKeySendUploadPost'][0])
    {
        $request = $this->instancesInstanceKeySendUploadPostRequest($instance_key, $type, $instances_instance_key_send_upload_post_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\whatsapi\models\MainAPIResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\whatsapi\models\MainAPIResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\whatsapi\models\MainAPIResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\whatsapi\models\MainAPIResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\whatsapi\models\MainAPIResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\whatsapi\models\MainAPIResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\whatsapi\models\MainAPIResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\whatsapi\models\MainAPIResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\whatsapi\models\MainAPIResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\whatsapi\models\MainAPIResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\whatsapi\models\MainAPIResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\whatsapi\models\MainAPIResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\whatsapi\models\MainAPIResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\whatsapi\models\MainAPIResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\whatsapi\models\MainAPIResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\whatsapi\models\MainAPIResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\whatsapi\models\MainAPIResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\whatsapi\models\MainAPIResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\whatsapi\models\MainAPIResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\whatsapi\models\MainAPIResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\whatsapi\models\MainAPIResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation instancesInstanceKeySendUploadPostAsync
     *
     * Upload media.
     *
     * @param  string $instance_key Instance key (required)
     * @param  string $type Media type (required)
     * @param  \whatsapi\models\InstancesInstanceKeySendUploadPostRequest $instances_instance_key_send_upload_post_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['instancesInstanceKeySendUploadPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function instancesInstanceKeySendUploadPostAsync($instance_key, $type, $instances_instance_key_send_upload_post_request, string $contentType = self::contentTypes['instancesInstanceKeySendUploadPost'][0])
    {
        return $this->instancesInstanceKeySendUploadPostAsyncWithHttpInfo($instance_key, $type, $instances_instance_key_send_upload_post_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation instancesInstanceKeySendUploadPostAsyncWithHttpInfo
     *
     * Upload media.
     *
     * @param  string $instance_key Instance key (required)
     * @param  string $type Media type (required)
     * @param  \whatsapi\models\InstancesInstanceKeySendUploadPostRequest $instances_instance_key_send_upload_post_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['instancesInstanceKeySendUploadPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function instancesInstanceKeySendUploadPostAsyncWithHttpInfo($instance_key, $type, $instances_instance_key_send_upload_post_request, string $contentType = self::contentTypes['instancesInstanceKeySendUploadPost'][0])
    {
        $returnType = '\whatsapi\models\MainAPIResponse';
        $request = $this->instancesInstanceKeySendUploadPostRequest($instance_key, $type, $instances_instance_key_send_upload_post_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'instancesInstanceKeySendUploadPost'
     *
     * @param  string $instance_key Instance key (required)
     * @param  string $type Media type (required)
     * @param  \whatsapi\models\InstancesInstanceKeySendUploadPostRequest $instances_instance_key_send_upload_post_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['instancesInstanceKeySendUploadPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function instancesInstanceKeySendUploadPostRequest($instance_key, $type, $instances_instance_key_send_upload_post_request, string $contentType = self::contentTypes['instancesInstanceKeySendUploadPost'][0])
    {

        // verify the required parameter 'instance_key' is set
        if ($instance_key === null || (is_array($instance_key) && count($instance_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $instance_key when calling instancesInstanceKeySendUploadPost'
            );
        }

        // verify the required parameter 'type' is set
        if ($type === null || (is_array($type) && count($type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $type when calling instancesInstanceKeySendUploadPost'
            );
        }

        // verify the required parameter 'instances_instance_key_send_upload_post_request' is set
        if ($instances_instance_key_send_upload_post_request === null || (is_array($instances_instance_key_send_upload_post_request) && count($instances_instance_key_send_upload_post_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $instances_instance_key_send_upload_post_request when calling instancesInstanceKeySendUploadPost'
            );
        }


        $resourcePath = '/instances/{instance_key}/send/upload';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $type,
            'type', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            true // required
        ) ?? []);


        // path params
        if ($instance_key !== null) {
            $resourcePath = str_replace(
                '{' . 'instance_key' . '}',
                ObjectSerializer::toPathValue($instance_key),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($instances_instance_key_send_upload_post_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($instances_instance_key_send_upload_post_request));
            } else {
                $httpBody = $instances_instance_key_send_upload_post_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation instancesInstanceKeySendVideoPost
     *
     * Send raw video.
     *
     * @param  string $instance_key Instance key (required)
     * @param  string $to The recipient&#39;s number (required)
     * @param  \whatsapi\models\InstancesInstanceKeySendVideoPostRequest $instances_instance_key_send_video_post_request instances_instance_key_send_video_post_request (required)
     * @param  string $caption Attached caption (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['instancesInstanceKeySendVideoPost'] to see the possible values for this operation
     *
     * @throws \whatsapi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \whatsapi\models\MainAPIResponse|\whatsapi\models\MainAPIResponse|\whatsapi\models\MainAPIResponse|\whatsapi\models\MainAPIResponse|\whatsapi\models\MainAPIResponse
     */
    public function instancesInstanceKeySendVideoPost($instance_key, $to, $instances_instance_key_send_video_post_request, $caption = null, string $contentType = self::contentTypes['instancesInstanceKeySendVideoPost'][0])
    {
        list($response) = $this->instancesInstanceKeySendVideoPostWithHttpInfo($instance_key, $to, $instances_instance_key_send_video_post_request, $caption, $contentType);
        return $response;
    }

    /**
     * Operation instancesInstanceKeySendVideoPostWithHttpInfo
     *
     * Send raw video.
     *
     * @param  string $instance_key Instance key (required)
     * @param  string $to The recipient&#39;s number (required)
     * @param  \whatsapi\models\InstancesInstanceKeySendVideoPostRequest $instances_instance_key_send_video_post_request (required)
     * @param  string $caption Attached caption (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['instancesInstanceKeySendVideoPost'] to see the possible values for this operation
     *
     * @throws \whatsapi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \whatsapi\models\MainAPIResponse|\whatsapi\models\MainAPIResponse|\whatsapi\models\MainAPIResponse|\whatsapi\models\MainAPIResponse|\whatsapi\models\MainAPIResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function instancesInstanceKeySendVideoPostWithHttpInfo($instance_key, $to, $instances_instance_key_send_video_post_request, $caption = null, string $contentType = self::contentTypes['instancesInstanceKeySendVideoPost'][0])
    {
        $request = $this->instancesInstanceKeySendVideoPostRequest($instance_key, $to, $instances_instance_key_send_video_post_request, $caption, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\whatsapi\models\MainAPIResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\whatsapi\models\MainAPIResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\whatsapi\models\MainAPIResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\whatsapi\models\MainAPIResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\whatsapi\models\MainAPIResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\whatsapi\models\MainAPIResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\whatsapi\models\MainAPIResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\whatsapi\models\MainAPIResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\whatsapi\models\MainAPIResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\whatsapi\models\MainAPIResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\whatsapi\models\MainAPIResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\whatsapi\models\MainAPIResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\whatsapi\models\MainAPIResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\whatsapi\models\MainAPIResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\whatsapi\models\MainAPIResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\whatsapi\models\MainAPIResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\whatsapi\models\MainAPIResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\whatsapi\models\MainAPIResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\whatsapi\models\MainAPIResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\whatsapi\models\MainAPIResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\whatsapi\models\MainAPIResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation instancesInstanceKeySendVideoPostAsync
     *
     * Send raw video.
     *
     * @param  string $instance_key Instance key (required)
     * @param  string $to The recipient&#39;s number (required)
     * @param  \whatsapi\models\InstancesInstanceKeySendVideoPostRequest $instances_instance_key_send_video_post_request (required)
     * @param  string $caption Attached caption (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['instancesInstanceKeySendVideoPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function instancesInstanceKeySendVideoPostAsync($instance_key, $to, $instances_instance_key_send_video_post_request, $caption = null, string $contentType = self::contentTypes['instancesInstanceKeySendVideoPost'][0])
    {
        return $this->instancesInstanceKeySendVideoPostAsyncWithHttpInfo($instance_key, $to, $instances_instance_key_send_video_post_request, $caption, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation instancesInstanceKeySendVideoPostAsyncWithHttpInfo
     *
     * Send raw video.
     *
     * @param  string $instance_key Instance key (required)
     * @param  string $to The recipient&#39;s number (required)
     * @param  \whatsapi\models\InstancesInstanceKeySendVideoPostRequest $instances_instance_key_send_video_post_request (required)
     * @param  string $caption Attached caption (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['instancesInstanceKeySendVideoPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function instancesInstanceKeySendVideoPostAsyncWithHttpInfo($instance_key, $to, $instances_instance_key_send_video_post_request, $caption = null, string $contentType = self::contentTypes['instancesInstanceKeySendVideoPost'][0])
    {
        $returnType = '\whatsapi\models\MainAPIResponse';
        $request = $this->instancesInstanceKeySendVideoPostRequest($instance_key, $to, $instances_instance_key_send_video_post_request, $caption, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'instancesInstanceKeySendVideoPost'
     *
     * @param  string $instance_key Instance key (required)
     * @param  string $to The recipient&#39;s number (required)
     * @param  \whatsapi\models\InstancesInstanceKeySendVideoPostRequest $instances_instance_key_send_video_post_request (required)
     * @param  string $caption Attached caption (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['instancesInstanceKeySendVideoPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function instancesInstanceKeySendVideoPostRequest($instance_key, $to, $instances_instance_key_send_video_post_request, $caption = null, string $contentType = self::contentTypes['instancesInstanceKeySendVideoPost'][0])
    {

        // verify the required parameter 'instance_key' is set
        if ($instance_key === null || (is_array($instance_key) && count($instance_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $instance_key when calling instancesInstanceKeySendVideoPost'
            );
        }

        // verify the required parameter 'to' is set
        if ($to === null || (is_array($to) && count($to) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $to when calling instancesInstanceKeySendVideoPost'
            );
        }

        // verify the required parameter 'instances_instance_key_send_video_post_request' is set
        if ($instances_instance_key_send_video_post_request === null || (is_array($instances_instance_key_send_video_post_request) && count($instances_instance_key_send_video_post_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $instances_instance_key_send_video_post_request when calling instancesInstanceKeySendVideoPost'
            );
        }



        $resourcePath = '/instances/{instance_key}/send/video';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $to,
            'to', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $caption,
            'caption', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($instance_key !== null) {
            $resourcePath = str_replace(
                '{' . 'instance_key' . '}',
                ObjectSerializer::toPathValue($instance_key),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($instances_instance_key_send_video_post_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($instances_instance_key_send_video_post_request));
            } else {
                $httpBody = $instances_instance_key_send_video_post_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
